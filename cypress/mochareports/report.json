{
  "stats": {
    "suites": 22,
    "tests": 134,
    "passes": 129,
    "pending": 0,
    "failures": 5,
    "start": "2021-09-30T14:19:30.357Z",
    "end": "2021-09-30T14:23:27.678Z",
    "duration": 121260,
    "testsRegistered": 134,
    "passPercent": 96.26865671641791,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7f5fef81-469d-4921-8249-e9832688e8c5",
      "title": "",
      "fullFile": "cypress/integration/1-getting-started/todo.spec.js",
      "file": "cypress/integration/1-getting-started/todo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bb844af9-4d59-474e-8072-fcd4b8f297e5",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 954,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2); // We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "f67c6f12-9925-4cd7-b1d5-237164b0af80",
              "parentUUID": "bb844af9-4d59-474e-8072-fcd4b8f297e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 545,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat'; // Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`); // Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "a0e46a0a-f742-4556-ad7c-d09a09ec5d8d",
              "parentUUID": "bb844af9-4d59-474e-8072-fcd4b8f297e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 274,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check(); // Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "1ce8f4ac-6041-401f-b5c5-a8c55cd40fcd",
              "parentUUID": "bb844af9-4d59-474e-8072-fcd4b8f297e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5a732c45-33dc-47ca-8334-90c6136bc80e",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 367,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click(); // After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog'); // For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "c6d75b72-1fee-49ca-a24a-2e5b710b54c2",
                  "parentUUID": "5a732c45-33dc-47ca-8334-90c6136bc80e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 371,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "63fbe698-bc2f-4299-8966-e67bc2d4c92d",
                  "parentUUID": "5a732c45-33dc-47ca-8334-90c6136bc80e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 387,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click(); // Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill'); // Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "20999dac-7a55-46a0-bb09-ed406f3c0ec4",
                  "parentUUID": "5a732c45-33dc-47ca-8334-90c6136bc80e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6d75b72-1fee-49ca-a24a-2e5b710b54c2",
                "63fbe698-bc2f-4299-8966-e67bc2d4c92d",
                "20999dac-7a55-46a0-bb09-ed406f3c0ec4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1125,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "f67c6f12-9925-4cd7-b1d5-237164b0af80",
            "a0e46a0a-f742-4556-ad7c-d09a09ec5d8d",
            "1ce8f4ac-6041-401f-b5c5-a8c55cd40fcd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1773,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "6a746ec9-2b32-41dc-94f5-d7c8d97dd76d",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/actions.spec.js",
      "file": "cypress/integration/2-advanced-examples/actions.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "58705c14-c1be-4b5c-9acd-0ee1d92b2b4c",
          "title": "Actions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 4992,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/type\ncy.get('.action-email').type('fake@email.com').should('have.value', 'fake@email.com') // .type() with special character sequences\n.type('{leftarrow}{rightarrow}{uparrow}{downarrow}').type('{del}{selectall}{backspace}') // .type() with key modifiers\n.type('{alt}{option}') //these are equivalent\n.type('{ctrl}{control}') //these are equivalent\n.type('{meta}{command}{cmd}') //these are equivalent\n.type('{shift}') // Delay each keypress by 0.1 sec\n.type('slow.typing@email.com', {\n  delay: 100\n}).should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled') // Ignore error checking prior to type\n// like whether the input is visible or disabled\n.type('disabled error checking', {\n  force: true\n}).should('have.value', 'disabled error checking');",
              "err": {},
              "uuid": "db50ee42-2e2a-4ac5-839a-5f08a3754542",
              "parentUUID": "58705c14-c1be-4b5c-9acd-0ee1d92b2b4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 384,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus().should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "cc8252c5-3da9-48a9-910e-27a67435be71",
              "parentUUID": "58705c14-c1be-4b5c-9acd-0ee1d92b2b4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 609,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur').blur().should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "ed756eee-923c-434e-8cb4-df5c96eee66e",
              "parentUUID": "58705c14-c1be-4b5c-9acd-0ee1d92b2b4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 781,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text').should('have.value', 'Clear this text').clear().should('have.value', '');",
              "err": {},
              "uuid": "77768fe6-3db0-4b75-a0b7-0a1b29b14c9a",
              "parentUUID": "58705c14-c1be-4b5c-9acd-0ee1d92b2b4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 701,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit().next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "5cc62ec5-d820-4aa4-80ee-0bd03a81d27b",
              "parentUUID": "58705c14-c1be-4b5c-9acd-0ee1d92b2b4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".click() - click on a DOM element",
              "fullTitle": "Actions .click() - click on a DOM element",
              "timedOut": null,
              "duration": 3151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/click\ncy.get('.action-btn').click(); // You can click on 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click();\ncy.get('#action-canvas').click('topLeft');\ncy.get('#action-canvas').click('top');\ncy.get('#action-canvas').click('topRight');\ncy.get('#action-canvas').click('left');\ncy.get('#action-canvas').click('right');\ncy.get('#action-canvas').click('bottomLeft');\ncy.get('#action-canvas').click('bottom');\ncy.get('#action-canvas').click('bottomRight'); // .click() accepts an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas').click(80, 75) // click 80px on x coord and 75px on y coord\n.click(170, 75).click(80, 165).click(100, 185).click(125, 190).click(150, 185).click(170, 165); // click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({\n  multiple: true\n}); // Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({\n  force: true\n});",
              "err": {},
              "uuid": "07977f29-5975-485f-ad82-de5e9d6e0355",
              "parentUUID": "58705c14-c1be-4b5c-9acd-0ee1d92b2b4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".dblclick() - double click on a DOM element",
              "fullTitle": "Actions .dblclick() - double click on a DOM element",
              "timedOut": null,
              "duration": 347,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/dblclick\n// Our app has a listener on 'dblclick' event in our 'scripts.js'\n// that hides the div and shows an input on double click\ncy.get('.action-div').dblclick().should('not.be.visible');\ncy.get('.action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "cb1396cd-58bb-40ce-a4be-ca8481d19b75",
              "parentUUID": "58705c14-c1be-4b5c-9acd-0ee1d92b2b4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".rightclick() - right click on a DOM element",
              "fullTitle": "Actions .rightclick() - right click on a DOM element",
              "timedOut": null,
              "duration": 421,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/rightclick\n// Our app has a listener on 'contextmenu' event in our 'scripts.js'\n// that hides the div and shows an input on right click\ncy.get('.rightclick-action-div').rightclick().should('not.be.visible');\ncy.get('.rightclick-action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "c0b84f93-3fa3-4a72-a28e-1224a08fea18",
              "parentUUID": "58705c14-c1be-4b5c-9acd-0ee1d92b2b4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".check() - check a checkbox or radio element",
              "fullTitle": "Actions .check() - check a checkbox or radio element",
              "timedOut": null,
              "duration": 1171,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/check\n// By default, .check() will check all\n// matching checkbox or radio elements in succession, one after another\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').check().should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').check().should('be.checked'); // .check() accepts a value argument\ncy.get('.action-radios [type=\"radio\"]').check('radio1').should('be.checked'); // .check() accepts an array of values\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').check(['checkbox1', 'checkbox2']).should('be.checked'); // Ignore error checking prior to checking\ncy.get('.action-checkboxes [disabled]').check({\n  force: true\n}).should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').check('radio3', {\n  force: true\n}).should('be.checked');",
              "err": {},
              "uuid": "0f6c377a-a7db-4e94-899b-955ab0fefac3",
              "parentUUID": "58705c14-c1be-4b5c-9acd-0ee1d92b2b4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".uncheck() - uncheck a checkbox element",
              "fullTitle": "Actions .uncheck() - uncheck a checkbox element",
              "timedOut": null,
              "duration": 1349,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/uncheck\n// By default, .uncheck() will uncheck all matching\n// checkbox elements in succession, one after another\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').uncheck().should('not.be.checked'); // .uncheck() accepts a value argument\ncy.get('.action-check [type=\"checkbox\"]').check('checkbox1').uncheck('checkbox1').should('not.be.checked'); // .uncheck() accepts an array of values\ncy.get('.action-check [type=\"checkbox\"]').check(['checkbox1', 'checkbox3']).uncheck(['checkbox1', 'checkbox3']).should('not.be.checked'); // Ignore error checking prior to unchecking\ncy.get('.action-check [disabled]').uncheck({\n  force: true\n}).should('not.be.checked');",
              "err": {},
              "uuid": "3b8b7967-7c26-4876-b1af-0aca808d3bb9",
              "parentUUID": "58705c14-c1be-4b5c-9acd-0ee1d92b2b4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".select() - select an option in a <select> element",
              "fullTitle": "Actions .select() - select an option in a <select> element",
              "timedOut": null,
              "duration": 1341,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/select\n// at first, no option should be selected\ncy.get('.action-select').should('have.value', '--Select a fruit--'); // Select option(s) with matching text content\ncy.get('.action-select').select('apples'); // confirm the apples were selected\n// note that each value starts with \"fr-\" in our HTML\ncy.get('.action-select').should('have.value', 'fr-apples');\ncy.get('.action-select-multiple').select(['apples', 'oranges', 'bananas']) // when getting multiple values, invoke \"val\" method first\n.invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // Select option(s) with matching value\ncy.get('.action-select').select('fr-bananas') // can attach an assertion right away to the element\n.should('have.value', 'fr-bananas');\ncy.get('.action-select-multiple').select(['fr-apples', 'fr-oranges', 'fr-bananas']).invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']); // assert the selected values include oranges\ncy.get('.action-select-multiple').invoke('val').should('include', 'fr-oranges');",
              "err": {},
              "uuid": "76010604-e8ce-4605-befb-91f0c04671ef",
              "parentUUID": "58705c14-c1be-4b5c-9acd-0ee1d92b2b4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".scrollIntoView() - scroll an element into view",
              "fullTitle": "Actions .scrollIntoView() - scroll an element into view",
              "timedOut": null,
              "duration": 424,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollintoview\n// normally all of these buttons are hidden,\n// because they're not within\n// the viewable area of their parent\n// (we need to scroll to see them)\ncy.get('#scroll-horizontal button').should('not.be.visible'); // scroll the button into view, as if the user had scrolled\ncy.get('#scroll-horizontal button').scrollIntoView().should('be.visible');\ncy.get('#scroll-vertical button').should('not.be.visible'); // Cypress handles the scroll direction needed\ncy.get('#scroll-vertical button').scrollIntoView().should('be.visible');\ncy.get('#scroll-both button').should('not.be.visible'); // Cypress knows to scroll to the right and down\ncy.get('#scroll-both button').scrollIntoView().should('be.visible');",
              "err": {},
              "uuid": "d901ff2a-f20c-4e65-a985-a1471a63b277",
              "parentUUID": "58705c14-c1be-4b5c-9acd-0ee1d92b2b4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".trigger() - trigger an event on a DOM element",
              "fullTitle": "Actions .trigger() - trigger an event on a DOM element",
              "timedOut": null,
              "duration": 412,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/trigger\n// To interact with a range input (slider)\n// we need to set its value & trigger the\n// event to signal it changed\n// Here, we invoke jQuery's val() method to set\n// the value and trigger the 'change' event\ncy.get('.trigger-input-range').invoke('val', 25).trigger('change').get('input[type=range]').siblings('p').should('have.text', '25');",
              "err": {},
              "uuid": "f8639e05-c8bc-484a-adc6-ad8490cf9e46",
              "parentUUID": "58705c14-c1be-4b5c-9acd-0ee1d92b2b4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.scrollTo() - scroll the window or element to a position",
              "fullTitle": "Actions cy.scrollTo() - scroll the window or element to a position",
              "timedOut": null,
              "duration": 2273,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollto\n// You can scroll to 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// if you chain .scrollTo() off of cy, we will\n// scroll the entire window\ncy.scrollTo('bottom');\ncy.get('#scrollable-horizontal').scrollTo('right'); // or you can scroll to a specific coordinate:\n// (x axis, y axis) in pixels\ncy.get('#scrollable-vertical').scrollTo(250, 250); // or you can scroll to a specific percentage\n// of the (width, height) of the element\ncy.get('#scrollable-both').scrollTo('75%', '25%'); // control the easing of the scroll (default is 'swing')\ncy.get('#scrollable-vertical').scrollTo('center', {\n  easing: 'linear'\n}); // control the duration of the scroll (in ms)\ncy.get('#scrollable-both').scrollTo('center', {\n  duration: 2000\n});",
              "err": {},
              "uuid": "c3983732-aac1-4bb9-80c7-6bdb1c50cb58",
              "parentUUID": "58705c14-c1be-4b5c-9acd-0ee1d92b2b4c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "db50ee42-2e2a-4ac5-839a-5f08a3754542",
            "cc8252c5-3da9-48a9-910e-27a67435be71",
            "ed756eee-923c-434e-8cb4-df5c96eee66e",
            "77768fe6-3db0-4b75-a0b7-0a1b29b14c9a",
            "5cc62ec5-d820-4aa4-80ee-0bd03a81d27b",
            "07977f29-5975-485f-ad82-de5e9d6e0355",
            "cb1396cd-58bb-40ce-a4be-ca8481d19b75",
            "c0b84f93-3fa3-4a72-a28e-1224a08fea18",
            "0f6c377a-a7db-4e94-899b-955ab0fefac3",
            "3b8b7967-7c26-4876-b1af-0aca808d3bb9",
            "76010604-e8ce-4605-befb-91f0c04671ef",
            "d901ff2a-f20c-4e65-a985-a1471a63b277",
            "f8639e05-c8bc-484a-adc6-ad8490cf9e46",
            "c3983732-aac1-4bb9-80c7-6bdb1c50cb58"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18356,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1569e20d-5175-4b49-b5b5-52099a99ae8f",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/aliasing.spec.js",
      "file": "cypress/integration/2-advanced-examples/aliasing.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b80eebe2-a39a-45b2-8a81-7571d7ce5de2",
          "title": "Aliasing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".as() - alias a DOM element for later use",
              "fullTitle": "Aliasing .as() - alias a DOM element for later use",
              "timedOut": null,
              "duration": 991,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/as\n// Alias a DOM element for use later\n// We don't have to traverse to the element\n// later in our code, we reference it with @\ncy.get('.as-table').find('tbody>tr').first().find('td').first().find('button').as('firstBtn'); // when we reference the alias, we place an\n// @ in front of its name\ncy.get('@firstBtn').click();\ncy.get('@firstBtn').should('have.class', 'btn-success').and('contain', 'Changed');",
              "err": {},
              "uuid": "f1021983-6729-4244-a044-47e53a5627e6",
              "parentUUID": "b80eebe2-a39a-45b2-8a81-7571d7ce5de2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".as() - alias a route for later use",
              "fullTitle": "Aliasing .as() - alias a route for later use",
              "timedOut": null,
              "duration": 802,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Alias the route to wait for its response\ncy.intercept('GET', '**/comments/*').as('getComment'); // we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click(); // https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('eq', 200);",
              "err": {},
              "uuid": "a866478a-bb2f-4c0b-bc78-71c40e402d7a",
              "parentUUID": "b80eebe2-a39a-45b2-8a81-7571d7ce5de2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f1021983-6729-4244-a044-47e53a5627e6",
            "a866478a-bb2f-4c0b-bc78-71c40e402d7a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1793,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "6ad47165-5554-4a53-8e93-d1d5f49229b2",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/assertions.spec.js",
      "file": "cypress/integration/2-advanced-examples/assertions.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "216900b2-e956-41fc-bd62-48903858d50b",
          "title": "Assertions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ac862a14-a715-43b6-a66f-7423e6aa1004",
              "title": "Implicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".should() - make an assertion about the current subject",
                  "fullTitle": "Assertions Implicit Assertions .should() - make an assertion about the current subject",
                  "timedOut": null,
                  "duration": 984,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/should\ncy.get('.assertion-table').find('tbody tr:last').should('have.class', 'success').find('td').first() // checking the text of the <td> element in various ways\n.should('have.text', 'Column content').should('contain', 'Column content').should('have.html', 'Column content') // chai-jquery uses \"is()\" to check if element matches selector\n.should('match', 'td') // to match text content against a regular expression\n// first need to invoke jQuery method text()\n// and then match using regular expression\n.invoke('text').should('match', /column content/i); // a better way to check element's text content against a regular expression\n// is to use \"cy.contains\"\n// https://on.cypress.io/contains\ncy.get('.assertion-table').find('tbody tr:last') // finds first <td> element with text content matching regular expression\n.contains('td', /column content/i).should('be.visible'); // for more information about asserting element's text\n// see https://on.cypress.io/using-cypress-faq#How-do-I-get-an-element’s-text-contents",
                  "err": {},
                  "uuid": "edfdc2bc-7258-4f2b-88ad-354193e703bc",
                  "parentUUID": "ac862a14-a715-43b6-a66f-7423e6aa1004",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": ".and() - chain multiple assertions together",
                  "fullTitle": "Assertions Implicit Assertions .and() - chain multiple assertions together",
                  "timedOut": null,
                  "duration": 198,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/and\ncy.get('.assertions-link').should('have.class', 'active').and('have.attr', 'href').and('include', 'cypress.io');",
                  "err": {},
                  "uuid": "51d73b08-6fde-4f22-bd49-ddac04e38c8b",
                  "parentUUID": "ac862a14-a715-43b6-a66f-7423e6aa1004",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "edfdc2bc-7258-4f2b-88ad-354193e703bc",
                "51d73b08-6fde-4f22-bd49-ddac04e38c8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1182,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "021921ea-f3af-421b-9b98-8c02654e3081",
              "title": "Explicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "expect - make an assertion about a specified subject",
                  "fullTitle": "Assertions Explicit Assertions expect - make an assertion about a specified subject",
                  "timedOut": null,
                  "duration": 200,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can use Chai's BDD style assertions\nexpect(true).to.be.true;\nconst o = {\n  foo: 'bar'\n};\nexpect(o).to.equal(o);\nexpect(o).to.deep.equal({\n  foo: 'bar'\n}); // matching text using regular expression\nexpect('FooBar').to.match(/bar$/i);",
                  "err": {},
                  "uuid": "51612fa6-a327-4f71-9e61-d793f263b2aa",
                  "parentUUID": "021921ea-f3af-421b-9b98-8c02654e3081",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "pass your own callback function to should()",
                  "fullTitle": "Assertions Explicit Assertions pass your own callback function to should()",
                  "timedOut": null,
                  "duration": 183,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Pass a function to should that can have any number\n// of explicit assertions within it.\n// The \".should(cb)\" function will be retried\n// automatically until it passes all your explicit assertions or times out.\ncy.get('.assertions-p').find('p').should($p => {\n  // https://on.cypress.io/$\n  // return an array of texts from all of the p's\n  // @ts-ignore TS6133 unused variable\n  const texts = $p.map((i, el) => Cypress.$(el).text()); // jquery map returns jquery object\n  // and .get() convert this to simple array\n  const paragraphs = texts.get(); // array should have length of 3\n  expect(paragraphs, 'has 3 paragraphs').to.have.length(3); // use second argument to expect(...) to provide clear\n  // message with each assertion\n  expect(paragraphs, 'has expected text in each paragraph').to.deep.eq(['Some text from first p', 'More text from second p', 'And even more text from third p']);\n});",
                  "err": {},
                  "uuid": "7564da76-a024-4c11-a1a1-e0dc7b3bb1b9",
                  "parentUUID": "021921ea-f3af-421b-9b98-8c02654e3081",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "finds element by class name regex",
                  "fullTitle": "Assertions Explicit Assertions finds element by class name regex",
                  "timedOut": null,
                  "duration": 217,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div') // .should(cb) callback function will be retried\n.should($div => {\n  expect($div).to.have.length(1);\n  const className = $div[0].className;\n  expect(className).to.match(/heading-/);\n}) // .then(cb) callback is not retried,\n// it either passes or fails\n.then($div => {\n  expect($div, 'text content').to.have.text('Introduction');\n});",
                  "err": {},
                  "uuid": "8a934636-89ab-43a1-9a27-a5ba0453edad",
                  "parentUUID": "021921ea-f3af-421b-9b98-8c02654e3081",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can throw any error",
                  "fullTitle": "Assertions Explicit Assertions can throw any error",
                  "timedOut": null,
                  "duration": 199,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div').should($div => {\n  if ($div.length !== 1) {\n    // you can throw your own errors\n    throw new Error('Did not find 1 element');\n  }\n  const className = $div[0].className;\n  if (!className.match(/heading-/)) {\n    throw new Error(`Could not find class \"heading-\" in ${className}`);\n  }\n});",
                  "err": {},
                  "uuid": "7ccf55c9-abe0-4c24-a4de-27c40581a6c4",
                  "parentUUID": "021921ea-f3af-421b-9b98-8c02654e3081",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "matches unknown text between two elements",
                  "fullTitle": "Assertions Explicit Assertions matches unknown text between two elements",
                  "timedOut": null,
                  "duration": 229,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**\n * Text from the first element.\n * @type {string}\n*/\nlet text;\n/**\n * Normalizes passed text,\n * useful before comparing text with spaces and different capitalization.\n * @param {string} s Text to normalize\n*/\nconst normalizeText = s => s.replace(/\\s/g, '').toLowerCase();\ncy.get('.two-elements').find('.first').then($first => {\n  // save text from the first element\n  text = normalizeText($first.text());\n});\ncy.get('.two-elements').find('.second').should($div => {\n  // we can massage text before comparing\n  const secondText = normalizeText($div.text());\n  expect(secondText, 'second text').to.equal(text);\n});",
                  "err": {},
                  "uuid": "16974ce7-dd44-4e92-bf1c-e6c2c078c837",
                  "parentUUID": "021921ea-f3af-421b-9b98-8c02654e3081",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "assert - assert shape of an object",
                  "fullTitle": "Assertions Explicit Assertions assert - assert shape of an object",
                  "timedOut": null,
                  "duration": 186,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const person = {\n  name: 'Joe',\n  age: 20\n};\nassert.isObject(person, 'value is object');",
                  "err": {},
                  "uuid": "343a612a-540a-406d-97b9-eda8c8485063",
                  "parentUUID": "021921ea-f3af-421b-9b98-8c02654e3081",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retries the should callback until assertions pass",
                  "fullTitle": "Assertions Explicit Assertions retries the should callback until assertions pass",
                  "timedOut": null,
                  "duration": 1686,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('#random-number').should($div => {\n  const n = parseFloat($div.text());\n  expect(n).to.be.gte(1).and.be.lte(10);\n});",
                  "err": {},
                  "uuid": "2ce4e3df-10c2-4fec-8f41-b5fb6a858a4b",
                  "parentUUID": "021921ea-f3af-421b-9b98-8c02654e3081",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51612fa6-a327-4f71-9e61-d793f263b2aa",
                "7564da76-a024-4c11-a1a1-e0dc7b3bb1b9",
                "8a934636-89ab-43a1-9a27-a5ba0453edad",
                "7ccf55c9-abe0-4c24-a4de-27c40581a6c4",
                "16974ce7-dd44-4e92-bf1c-e6c2c078c837",
                "343a612a-540a-406d-97b9-eda8c8485063",
                "2ce4e3df-10c2-4fec-8f41-b5fb6a858a4b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2900,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2b1ea62b-9ea3-46e6-8b70-7cb4f1d8f635",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/connectors.spec.js",
      "file": "cypress/integration/2-advanced-examples/connectors.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0d861b52-0596-4c98-b9cf-f5ab614fa065",
          "title": "Connectors",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".each() - iterate over an array of elements",
              "fullTitle": "Connectors .each() - iterate over an array of elements",
              "timedOut": null,
              "duration": 727,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/each\ncy.get('.connectors-each-ul>li').each(($el, index, $list) => {\n  console.log($el, index, $list);\n});",
              "err": {},
              "uuid": "98a59863-4865-42c8-b3c9-de605f5657e4",
              "parentUUID": "0d861b52-0596-4c98-b9cf-f5ab614fa065",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".its() - get properties on the current subject",
              "fullTitle": "Connectors .its() - get properties on the current subject",
              "timedOut": null,
              "duration": 258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/its\ncy.get('.connectors-its-ul>li') // calls the 'length' property yielding that value\n.its('length').should('be.gt', 2);",
              "err": {},
              "uuid": "2c679a34-b32c-457d-83f9-d9c7ff7dab1d",
              "parentUUID": "0d861b52-0596-4c98-b9cf-f5ab614fa065",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".invoke() - invoke a function on the current subject",
              "fullTitle": "Connectors .invoke() - invoke a function on the current subject",
              "timedOut": null,
              "duration": 245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// our div is hidden in our script.js\n// $('.connectors-div').hide()\n// https://on.cypress.io/invoke\ncy.get('.connectors-div').should('be.hidden') // call the jquery method 'show' on the 'div.container'\n.invoke('show').should('be.visible');",
              "err": {},
              "uuid": "93a80381-3cc0-452b-afad-35b101157d4d",
              "parentUUID": "0d861b52-0596-4c98-b9cf-f5ab614fa065",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".spread() - spread an array as individual args to callback function",
              "fullTitle": "Connectors .spread() - spread an array as individual args to callback function",
              "timedOut": null,
              "duration": 196,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spread\nconst arr = ['foo', 'bar', 'baz'];\ncy.wrap(arr).spread((foo, bar, baz) => {\n  expect(foo).to.eq('foo');\n  expect(bar).to.eq('bar');\n  expect(baz).to.eq('baz');\n});",
              "err": {},
              "uuid": "8e1ee750-3064-4a7f-aef1-9820817f638a",
              "parentUUID": "0d861b52-0596-4c98-b9cf-f5ab614fa065",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "3a2bd936-dfbc-436e-9d00-356571a2f137",
              "title": ".then()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invokes a callback function with the current subject",
                  "fullTitle": "Connectors .then() invokes a callback function with the current subject",
                  "timedOut": null,
                  "duration": 316,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/then\ncy.get('.connectors-list > li').then($lis => {\n  expect($lis, '3 items').to.have.length(3);\n  expect($lis.eq(0), 'first item').to.contain('Walk the dog');\n  expect($lis.eq(1), 'second item').to.contain('Feed the cat');\n  expect($lis.eq(2), 'third item').to.contain('Write JavaScript');\n});",
                  "err": {},
                  "uuid": "ff9e6f70-f9d5-4c77-aee7-c77974355938",
                  "parentUUID": "3a2bd936-dfbc-436e-9d00-356571a2f137",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the returned value to the next command",
                  "fullTitle": "Connectors .then() yields the returned value to the next command",
                  "timedOut": null,
                  "duration": 226,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  return 2;\n}).then(num => {\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "d442bd74-3973-4aee-aee4-265251b8e96e",
                  "parentUUID": "3a2bd936-dfbc-436e-9d00-356571a2f137",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the original subject without return",
                  "fullTitle": "Connectors .then() yields the original subject without return",
                  "timedOut": null,
                  "duration": 202,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1); // note that nothing is returned from this callback\n}).then(num => {\n  // this callback receives the original unchanged value 1\n  expect(num).to.equal(1);\n});",
                  "err": {},
                  "uuid": "bc529d23-ace0-4497-8f44-14295dfeafbf",
                  "parentUUID": "3a2bd936-dfbc-436e-9d00-356571a2f137",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the value yielded by the last Cypress command inside",
                  "fullTitle": "Connectors .then() yields the value yielded by the last Cypress command inside",
                  "timedOut": null,
                  "duration": 223,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1); // note how we run a Cypress command\n  // the result yielded by this Cypress command\n  // will be passed to the second \".then\"\n  cy.wrap(2);\n}).then(num => {\n  // this callback receives the value yielded by \"cy.wrap(2)\"\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "a35e847a-5d5f-4cba-9bfe-5e5ea9ec7da5",
                  "parentUUID": "3a2bd936-dfbc-436e-9d00-356571a2f137",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff9e6f70-f9d5-4c77-aee7-c77974355938",
                "d442bd74-3973-4aee-aee4-265251b8e96e",
                "bc529d23-ace0-4497-8f44-14295dfeafbf",
                "a35e847a-5d5f-4cba-9bfe-5e5ea9ec7da5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 967,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "98a59863-4865-42c8-b3c9-de605f5657e4",
            "2c679a34-b32c-457d-83f9-d9c7ff7dab1d",
            "93a80381-3cc0-452b-afad-35b101157d4d",
            "8e1ee750-3064-4a7f-aef1-9820817f638a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1426,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "36378410-1e67-4ae9-87a9-9574028975d6",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/cookies.spec.js",
      "file": "cypress/integration/2-advanced-examples/cookies.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f3b9497d-9a43-47b9-9521-9e2e2e8391cc",
          "title": "Cookies",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.getCookie() - get a browser cookie",
              "fullTitle": "Cookies cy.getCookie() - get a browser cookie",
              "timedOut": null,
              "duration": 1088,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookie\ncy.get('#getCookie .set-a-cookie').click(); // cy.getCookie() yields a cookie object\ncy.getCookie('token').should('have.property', 'value', '123ABC');",
              "err": {},
              "uuid": "98e07318-c202-4428-a36b-2492906aab80",
              "parentUUID": "f3b9497d-9a43-47b9-9521-9e2e2e8391cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getCookies() - get browser cookies",
              "fullTitle": "Cookies cy.getCookies() - get browser cookies",
              "timedOut": null,
              "duration": 302,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookies\ncy.getCookies().should('be.empty');\ncy.get('#getCookies .set-a-cookie').click(); // cy.getCookies() yields an array of cookies\ncy.getCookies().should('have.length', 1).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'token');\n  expect(cookies[0]).to.have.property('value', '123ABC');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n});",
              "err": {},
              "uuid": "9560c796-6c5c-46ef-9017-ccc7b0ae92b7",
              "parentUUID": "f3b9497d-9a43-47b9-9521-9e2e2e8391cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.setCookie() - set a browser cookie",
              "fullTitle": "Cookies cy.setCookie() - set a browser cookie",
              "timedOut": null,
              "duration": 232,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/setcookie\ncy.getCookies().should('be.empty');\ncy.setCookie('foo', 'bar'); // cy.getCookie() yields a cookie object\ncy.getCookie('foo').should('have.property', 'value', 'bar');",
              "err": {},
              "uuid": "585316a0-5300-451b-bf7d-5d85ffcb3a86",
              "parentUUID": "f3b9497d-9a43-47b9-9521-9e2e2e8391cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookie() - clear a browser cookie",
              "fullTitle": "Cookies cy.clearCookie() - clear a browser cookie",
              "timedOut": null,
              "duration": 322,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookie\ncy.getCookie('token').should('be.null');\ncy.get('#clearCookie .set-a-cookie').click();\ncy.getCookie('token').should('have.property', 'value', '123ABC'); // cy.clearCookies() yields null\ncy.clearCookie('token').should('be.null');\ncy.getCookie('token').should('be.null');",
              "err": {},
              "uuid": "c71987db-9051-44c6-884f-3977efcb78e3",
              "parentUUID": "f3b9497d-9a43-47b9-9521-9e2e2e8391cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookies() - clear browser cookies",
              "fullTitle": "Cookies cy.clearCookies() - clear browser cookies",
              "timedOut": null,
              "duration": 291,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookies\ncy.getCookies().should('be.empty');\ncy.get('#clearCookies .set-a-cookie').click();\ncy.getCookies().should('have.length', 1); // cy.clearCookies() yields null\ncy.clearCookies();\ncy.getCookies().should('be.empty');",
              "err": {},
              "uuid": "a7e6aff9-4239-443e-9d4e-c3f1c414058c",
              "parentUUID": "f3b9497d-9a43-47b9-9521-9e2e2e8391cc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "98e07318-c202-4428-a36b-2492906aab80",
            "9560c796-6c5c-46ef-9017-ccc7b0ae92b7",
            "585316a0-5300-451b-bf7d-5d85ffcb3a86",
            "c71987db-9051-44c6-884f-3977efcb78e3",
            "a7e6aff9-4239-443e-9d4e-c3f1c414058c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2235,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9ec53346-4176-458b-81e1-9a94c821d4fe",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/cypress_api.spec.js",
      "file": "cypress/integration/2-advanced-examples/cypress_api.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "956b3edb-9939-4910-81de-ff2a27b0c0ec",
          "title": "Cypress.Commands",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".add() - create a custom command",
              "fullTitle": "Cypress.Commands .add() - create a custom command",
              "timedOut": null,
              "duration": 1163,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Cypress.Commands.add('console', {\n  prevSubject: true\n}, (subject, method) => {\n  // the previous subject is automatically received\n  // and the commands arguments are shifted\n  // allow us to change the console method used\n  method = method || 'log'; // log the subject to the console\n  // @ts-ignore TS7017\n  console[method]('The subject is', subject); // whatever we return becomes the new subject\n  // we don't want to change the subject so\n  // we return whatever was passed in\n  return subject;\n}); // @ts-ignore TS2339\ncy.get('button').console('info').then($button => {// subject is still $button\n});",
              "err": {},
              "uuid": "c4267c93-3ffd-4a7d-8798-a33fd8ab2ed6",
              "parentUUID": "956b3edb-9939-4910-81de-ff2a27b0c0ec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4267c93-3ffd-4a7d-8798-a33fd8ab2ed6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1163,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d4a16184-c467-4770-a31e-d1312854f0cf",
          "title": "Cypress.Cookies",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".debug() - enable or disable debugging",
              "fullTitle": "Cypress.Cookies .debug() - enable or disable debugging",
              "timedOut": null,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Cypress.Cookies.debug(true); // Cypress will now log in the console when\n// cookies are set or cleared\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');",
              "err": {},
              "uuid": "d0abd193-f782-4913-a67f-a613a5b52f4d",
              "parentUUID": "d4a16184-c467-4770-a31e-d1312854f0cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".preserveOnce() - preserve cookies by key",
              "fullTitle": "Cypress.Cookies .preserveOnce() - preserve cookies by key",
              "timedOut": null,
              "duration": 166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// normally cookies are reset after each test\ncy.getCookie('fakeCookie').should('not.be.ok'); // preserving a cookie will not clear it when\n// the next test starts\ncy.setCookie('lastCookie', '789XYZ');\nCypress.Cookies.preserveOnce('lastCookie');",
              "err": {},
              "uuid": "f223fe0d-5f00-4565-aee3-11e349fc4474",
              "parentUUID": "d4a16184-c467-4770-a31e-d1312854f0cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".defaults() - set defaults for all cookies",
              "fullTitle": "Cypress.Cookies .defaults() - set defaults for all cookies",
              "timedOut": null,
              "duration": 164,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// now any cookie with the name 'session_id' will\n// not be cleared before each new test runs\nCypress.Cookies.defaults({\n  preserve: 'session_id'\n});",
              "err": {},
              "uuid": "18f1763d-9d36-4a92-a974-318adfd6c80f",
              "parentUUID": "d4a16184-c467-4770-a31e-d1312854f0cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d0abd193-f782-4913-a67f-a613a5b52f4d",
            "f223fe0d-5f00-4565-aee3-11e349fc4474",
            "18f1763d-9d36-4a92-a974-318adfd6c80f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 549,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4dba661c-a991-4fba-8b9e-7d313faf9969",
          "title": "Cypress.arch",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get CPU architecture name of underlying OS",
              "fullTitle": "Cypress.arch Get CPU architecture name of underlying OS",
              "timedOut": null,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/arch\nexpect(Cypress.arch).to.exist;",
              "err": {},
              "uuid": "74919dcb-01c1-469c-8b25-c03e5abe930b",
              "parentUUID": "4dba661c-a991-4fba-8b9e-7d313faf9969",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "74919dcb-01c1-469c-8b25-c03e5abe930b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 186,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "53af8d30-8128-4713-a6e1-3e09005b87d0",
          "title": "Cypress.config()",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get and set configuration options",
              "fullTitle": "Cypress.config() Get and set configuration options",
              "timedOut": null,
              "duration": 339,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/config\nlet myConfig = Cypress.config();\nexpect(myConfig).to.have.property('animationDistanceThreshold', 5);\nexpect(myConfig).to.have.property('baseUrl', null);\nexpect(myConfig).to.have.property('defaultCommandTimeout', 4000);\nexpect(myConfig).to.have.property('requestTimeout', 5000);\nexpect(myConfig).to.have.property('responseTimeout', 30000);\nexpect(myConfig).to.have.property('viewportHeight', 660);\nexpect(myConfig).to.have.property('viewportWidth', 1000);\nexpect(myConfig).to.have.property('pageLoadTimeout', 60000);\nexpect(myConfig).to.have.property('waitForAnimations', true);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(60000); // this will change the config for the rest of your tests!\nCypress.config('pageLoadTimeout', 20000);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(20000);\nCypress.config('pageLoadTimeout', 60000);",
              "err": {
                "message": "AssertionError: expected { Object (baseUrl, chromeWebSecurity, ...) } to have property 'baseUrl' of null, but got 'https://www.saucedemo.com'",
                "estack": "AssertionError: expected { Object (baseUrl, chromeWebSecurity, ...) } to have property 'baseUrl' of null, but got 'https://www.saucedemo.com'\n    at Context.eval (https://example.cypress.io/__cypress/tests?p=cypress/integration/2-advanced-examples/cypress_api.spec.js:174:30)",
                "diff": null
              },
              "uuid": "cd1d8122-eb91-4d85-9a7b-532590dc4260",
              "parentUUID": "53af8d30-8128-4713-a6e1-3e09005b87d0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cd1d8122-eb91-4d85-9a7b-532590dc4260"
          ],
          "pending": [],
          "skipped": [],
          "duration": 339,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dbd72968-7d87-4b87-aebd-56b9b79da8cd",
          "title": "Cypress.dom",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".isHidden() - determine if a DOM element is hidden",
              "fullTitle": "Cypress.dom .isHidden() - determine if a DOM element is hidden",
              "timedOut": null,
              "duration": 197,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let hiddenP = Cypress.$('.dom-p p.hidden').get(0);\nlet visibleP = Cypress.$('.dom-p p.visible').get(0); // our first paragraph has css class 'hidden'\nexpect(Cypress.dom.isHidden(hiddenP)).to.be.true;\nexpect(Cypress.dom.isHidden(visibleP)).to.be.false;",
              "err": {},
              "uuid": "97396f3a-d122-4cea-87ae-fbffe03d66f6",
              "parentUUID": "dbd72968-7d87-4b87-aebd-56b9b79da8cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "97396f3a-d122-4cea-87ae-fbffe03d66f6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 197,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7aa2cf16-05cb-4692-adfc-1477e3e797e8",
          "title": "Cypress.env()",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get environment variables",
              "fullTitle": "Cypress.env() Get environment variables",
              "timedOut": null,
              "duration": 184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/env\n// set multiple environment variables\nCypress.env({\n  host: 'veronica.dev.local',\n  api_server: 'http://localhost:8888/v1/'\n}); // get environment variable\nexpect(Cypress.env('host')).to.eq('veronica.dev.local'); // set environment variable\nCypress.env('api_server', 'http://localhost:8888/v2/');\nexpect(Cypress.env('api_server')).to.eq('http://localhost:8888/v2/'); // get all environment variable\nexpect(Cypress.env()).to.have.property('host', 'veronica.dev.local');\nexpect(Cypress.env()).to.have.property('api_server', 'http://localhost:8888/v2/');",
              "err": {},
              "uuid": "012beda0-fc32-402d-89d9-62aea61926ad",
              "parentUUID": "7aa2cf16-05cb-4692-adfc-1477e3e797e8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "012beda0-fc32-402d-89d9-62aea61926ad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 184,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e64387d1-0450-4356-914d-2800c5d27f00",
          "title": "Cypress.log",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Control what is printed to the Command Log",
              "fullTitle": "Cypress.log Control what is printed to the Command Log",
              "timedOut": null,
              "duration": 170,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/cypress-log",
              "err": {},
              "uuid": "9dcc3468-fdb1-4a33-93df-54db4f824c5a",
              "parentUUID": "e64387d1-0450-4356-914d-2800c5d27f00",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9dcc3468-fdb1-4a33-93df-54db4f824c5a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 170,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ff59f0bd-a3a8-4667-84d6-cf3b7f8bcd74",
          "title": "Cypress.platform",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get underlying OS name",
              "fullTitle": "Cypress.platform Get underlying OS name",
              "timedOut": null,
              "duration": 188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/platform\nexpect(Cypress.platform).to.be.exist;",
              "err": {},
              "uuid": "515307df-7384-4ead-a183-d39f58ce6112",
              "parentUUID": "ff59f0bd-a3a8-4667-84d6-cf3b7f8bcd74",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "515307df-7384-4ead-a183-d39f58ce6112"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 188,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e6cdcaaf-e115-4805-9532-14c08244c019",
          "title": "Cypress.version",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get current version of Cypress being run",
              "fullTitle": "Cypress.version Get current version of Cypress being run",
              "timedOut": null,
              "duration": 173,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/version\nexpect(Cypress.version).to.be.exist;",
              "err": {},
              "uuid": "2ab4789d-efad-4680-8a2b-6ffd6a0b4c03",
              "parentUUID": "e6cdcaaf-e115-4805-9532-14c08244c019",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2ab4789d-efad-4680-8a2b-6ffd6a0b4c03"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 173,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "738df2f8-f6b7-47ae-ae0c-0156dbb351a9",
          "title": "Cypress.spec",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get current spec information",
              "fullTitle": "Cypress.spec Get current spec information",
              "timedOut": null,
              "duration": 190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spec\n// wrap the object so we can inspect it easily by clicking in the command log\ncy.wrap(Cypress.spec).should('include.keys', ['name', 'relative', 'absolute']);",
              "err": {},
              "uuid": "aa541c07-b3f4-4efb-9e60-391893b6afe6",
              "parentUUID": "738df2f8-f6b7-47ae-ae0c-0156dbb351a9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa541c07-b3f4-4efb-9e60-391893b6afe6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 190,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f31c6d4d-af9e-4e82-9dec-384dc9a62744",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/files.spec.js",
      "file": "cypress/integration/2-advanced-examples/files.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4365391d-f09e-43d9-96bb-ce0c90e8c606",
          "title": "Files",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.fixture() - load a fixture",
              "fullTitle": "Files cy.fixture() - load a fixture",
              "timedOut": null,
              "duration": 1168,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/fixture\n// Instead of writing a response inline you can\n// use a fixture file's content.\n// when application makes an Ajax request matching \"GET **/comments/*\"\n// Cypress will intercept it and reply with the object in `example.json` fixture\ncy.intercept('GET', '**/comments/*', {\n  fixture: 'example.json'\n}).as('getComment'); // we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.fixture-btn').click();\ncy.wait('@getComment').its('response.body').should('have.property', 'name').and('include', 'Using fixtures to represent data');",
              "err": {},
              "uuid": "c52ed1ff-5a41-4f32-aec4-4764b52294a8",
              "parentUUID": "4365391d-f09e-43d9-96bb-ce0c90e8c606",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.fixture() or require - load a fixture",
              "fullTitle": "Files cy.fixture() or require - load a fixture",
              "timedOut": null,
              "duration": 210,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// we are inside the \"function () { ... }\"\n// callback and can use test context object \"this\"\n// \"this.example\" was loaded in \"beforeEach\" function callback\nexpect(this.example, 'fixture in the test context').to.deep.equal(requiredExample); // or use \"cy.wrap\" and \"should('deep.equal', ...)\" assertion\ncy.wrap(this.example).should('deep.equal', requiredExample);",
              "err": {},
              "uuid": "ccc18170-9cde-4a9c-bd20-5eb1003a2621",
              "parentUUID": "4365391d-f09e-43d9-96bb-ce0c90e8c606",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.readFile() - read file contents",
              "fullTitle": "Files cy.readFile() - read file contents",
              "timedOut": null,
              "duration": 213,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/readfile\n// You can read a file and yield its contents\n// The filePath is relative to your project's root.\ncy.readFile('cypress.json').then(json => {\n  expect(json).to.be.an('object');\n});",
              "err": {},
              "uuid": "4b3b97b4-43ca-4346-ab96-0bb50835d70d",
              "parentUUID": "4365391d-f09e-43d9-96bb-ce0c90e8c606",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.writeFile() - write to a file",
              "fullTitle": "Files cy.writeFile() - write to a file",
              "timedOut": null,
              "duration": 732,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/writefile\n// You can write to a file\n// Use a response from a request to automatically\n// generate a fixture file for use later\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  cy.writeFile('cypress/fixtures/users.json', response.body);\n});\ncy.fixture('users').should(users => {\n  expect(users[0].name).to.exist;\n}); // JavaScript arrays and objects are stringified\n// and formatted into text.\ncy.writeFile('cypress/fixtures/profile.json', {\n  id: 8739,\n  name: 'Jane',\n  email: 'jane@example.com'\n});\ncy.fixture('profile').should(profile => {\n  expect(profile.name).to.eq('Jane');\n});",
              "err": {},
              "uuid": "10a014d1-89b9-4b39-b245-e951cf053dd1",
              "parentUUID": "4365391d-f09e-43d9-96bb-ce0c90e8c606",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c52ed1ff-5a41-4f32-aec4-4764b52294a8",
            "ccc18170-9cde-4a9c-bd20-5eb1003a2621",
            "4b3b97b4-43ca-4346-ab96-0bb50835d70d",
            "10a014d1-89b9-4b39-b245-e951cf053dd1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2323,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1d8d7efc-46f1-4e96-b4fe-449eb4d38ab9",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/local_storage.spec.js",
      "file": "cypress/integration/2-advanced-examples/local_storage.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b3ea55a1-e7f2-4003-be44-a90f3e095af0",
          "title": "Local Storage",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.clearLocalStorage() - clear all data in local storage",
              "fullTitle": "Local Storage cy.clearLocalStorage() - clear all data in local storage",
              "timedOut": null,
              "duration": 1295,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearlocalstorage\ncy.get('.ls-btn').click().should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n}); // clearLocalStorage() yields the localStorage object\ncy.clearLocalStorage().should(ls => {\n  expect(ls.getItem('prop1')).to.be.null;\n  expect(ls.getItem('prop2')).to.be.null;\n  expect(ls.getItem('prop3')).to.be.null;\n});\ncy.get('.ls-btn').click().should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n}); // Clear key matching string in Local Storage\ncy.clearLocalStorage('prop1').should(ls => {\n  expect(ls.getItem('prop1')).to.be.null;\n  expect(ls.getItem('prop2')).to.eq('blue');\n  expect(ls.getItem('prop3')).to.eq('magenta');\n});\ncy.get('.ls-btn').click().should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n}); // Clear keys matching regex in Local Storage\ncy.clearLocalStorage(/prop1|2/).should(ls => {\n  expect(ls.getItem('prop1')).to.be.null;\n  expect(ls.getItem('prop2')).to.be.null;\n  expect(ls.getItem('prop3')).to.eq('magenta');\n});",
              "err": {},
              "uuid": "95938f96-4e07-4171-a4bb-71d01f7d3063",
              "parentUUID": "b3ea55a1-e7f2-4003-be44-a90f3e095af0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "95938f96-4e07-4171-a4bb-71d01f7d3063"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1295,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "790a58e2-1951-41ec-b960-2958ecd7e10d",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/location.spec.js",
      "file": "cypress/integration/2-advanced-examples/location.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "36fd2f1e-1a97-4330-a555-b609dc07fafc",
          "title": "Location",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.hash() - get the current URL hash",
              "fullTitle": "Location cy.hash() - get the current URL hash",
              "timedOut": null,
              "duration": 842,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/hash\ncy.hash().should('be.empty');",
              "err": {},
              "uuid": "3ae50ab1-0f7b-4864-8a58-5185f4fb947a",
              "parentUUID": "36fd2f1e-1a97-4330-a555-b609dc07fafc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.location() - get window.location",
              "fullTitle": "Location cy.location() - get window.location",
              "timedOut": null,
              "duration": 172,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/location\ncy.location().should(location => {\n  expect(location.hash).to.be.empty;\n  expect(location.href).to.eq('https://example.cypress.io/commands/location');\n  expect(location.host).to.eq('example.cypress.io');\n  expect(location.hostname).to.eq('example.cypress.io');\n  expect(location.origin).to.eq('https://example.cypress.io');\n  expect(location.pathname).to.eq('/commands/location');\n  expect(location.port).to.eq('');\n  expect(location.protocol).to.eq('https:');\n  expect(location.search).to.be.empty;\n});",
              "err": {},
              "uuid": "6b484002-fb17-44ad-99f8-09c106f160b7",
              "parentUUID": "36fd2f1e-1a97-4330-a555-b609dc07fafc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.url() - get the current URL",
              "fullTitle": "Location cy.url() - get the current URL",
              "timedOut": null,
              "duration": 134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/url\ncy.url().should('eq', 'https://example.cypress.io/commands/location');",
              "err": {},
              "uuid": "d642231a-dda7-4322-8c3b-418e56cd8cd2",
              "parentUUID": "36fd2f1e-1a97-4330-a555-b609dc07fafc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3ae50ab1-0f7b-4864-8a58-5185f4fb947a",
            "6b484002-fb17-44ad-99f8-09c106f160b7",
            "d642231a-dda7-4322-8c3b-418e56cd8cd2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1148,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "bc55230f-9f49-4641-9bbe-76dc435e6048",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/misc.spec.js",
      "file": "cypress/integration/2-advanced-examples/misc.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5adc3cb3-039c-49e2-beb1-26c38ef6925a",
          "title": "Misc",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".end() - end the command chain",
              "fullTitle": "Misc .end() - end the command chain",
              "timedOut": null,
              "duration": 1087,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/end\n// cy.end is useful when you want to end a chain of commands\n// and force Cypress to re-query from the root element\ncy.get('.misc-table').within(() => {\n  // ends the current chain and yields null\n  cy.contains('Cheryl').click().end(); // queries the entire table again\n  cy.contains('Charles').click();\n});",
              "err": {},
              "uuid": "8a39f8cd-a0bb-40b3-b94a-76d29422a631",
              "parentUUID": "5adc3cb3-039c-49e2-beb1-26c38ef6925a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.exec() - execute a system command",
              "fullTitle": "Misc cy.exec() - execute a system command",
              "timedOut": null,
              "duration": 2434,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// execute a system command.\n// so you can take actions necessary for\n// your test outside the scope of Cypress.\n// https://on.cypress.io/exec\n// we can use Cypress.platform string to\n// select appropriate command\n// https://on.cypress/io/platform\ncy.log(`Platform ${Cypress.platform} architecture ${Cypress.arch}`); // on CircleCI Windows build machines we have a failure to run bash shell\n// https://github.com/cypress-io/cypress/issues/5169\n// so skip some of the tests by passing flag \"--env circle=true\"\nconst isCircleOnWindows = Cypress.platform === 'win32' && Cypress.env('circle');\nif (isCircleOnWindows) {\n  cy.log('Skipping test on CircleCI');\n  return;\n} // cy.exec problem on Shippable CI\n// https://github.com/cypress-io/cypress/issues/6718\n\nconst isShippable = Cypress.platform === 'linux' && Cypress.env('shippable');\nif (isShippable) {\n  cy.log('Skipping test on ShippableCI');\n  return;\n}\ncy.exec('echo Jane Lane').its('stdout').should('contain', 'Jane Lane');\nif (Cypress.platform === 'win32') {\n  cy.exec('print cypress.json').its('stderr').should('be.empty');\n} else {\n  cy.exec('cat cypress.json').its('stderr').should('be.empty');\n  cy.exec('pwd').its('code').should('eq', 0);\n}",
              "err": {},
              "uuid": "5be524bb-ab81-46ff-94ae-aac4f2b36cd4",
              "parentUUID": "5adc3cb3-039c-49e2-beb1-26c38ef6925a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.focused() - get the DOM element that has focus",
              "fullTitle": "Misc cy.focused() - get the DOM element that has focus",
              "timedOut": null,
              "duration": 395,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focused\ncy.get('.misc-form').find('#name').click();\ncy.focused().should('have.id', 'name');\ncy.get('.misc-form').find('#description').click();\ncy.focused().should('have.id', 'description');",
              "err": {},
              "uuid": "6a3dbffe-5c30-48f7-ae30-473d5d226851",
              "parentUUID": "5adc3cb3-039c-49e2-beb1-26c38ef6925a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wrap() - wrap an object",
              "fullTitle": "Misc cy.wrap() - wrap an object",
              "timedOut": null,
              "duration": 171,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/wrap\ncy.wrap({\n  foo: 'bar'\n}).should('have.property', 'foo').and('include', 'bar');",
              "err": {},
              "uuid": "b60f6717-05a7-4f63-9c85-383a4f2b5192",
              "parentUUID": "5adc3cb3-039c-49e2-beb1-26c38ef6925a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "667ab8c4-1f2b-435c-85b9-bbc8602d2b9c",
              "title": "Cypress.Screenshot",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cy.screenshot() - take a screenshot",
                  "fullTitle": "Misc Cypress.Screenshot cy.screenshot() - take a screenshot",
                  "timedOut": null,
                  "duration": 1138,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/screenshot\ncy.screenshot('my-image');",
                  "err": {},
                  "uuid": "fcdae1dc-e616-4f96-9099-eacd03c70dde",
                  "parentUUID": "667ab8c4-1f2b-435c-85b9-bbc8602d2b9c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cypress.Screenshot.defaults() - change default config of screenshots",
                  "fullTitle": "Misc Cypress.Screenshot Cypress.Screenshot.defaults() - change default config of screenshots",
                  "timedOut": null,
                  "duration": 147,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Screenshot.defaults({\n  blackout: ['.foo'],\n  capture: 'viewport',\n  clip: {\n    x: 0,\n    y: 0,\n    width: 200,\n    height: 200\n  },\n  scale: false,\n  disableTimersAndAnimations: true,\n  screenshotOnRunFailure: true,\n  onBeforeScreenshot() {},\n  onAfterScreenshot() {}\n});",
                  "err": {},
                  "uuid": "13057cde-e7d5-49a5-b1c5-acb88d23dd6e",
                  "parentUUID": "667ab8c4-1f2b-435c-85b9-bbc8602d2b9c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fcdae1dc-e616-4f96-9099-eacd03c70dde",
                "13057cde-e7d5-49a5-b1c5-acb88d23dd6e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1285,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "8a39f8cd-a0bb-40b3-b94a-76d29422a631",
            "5be524bb-ab81-46ff-94ae-aac4f2b36cd4",
            "6a3dbffe-5c30-48f7-ae30-473d5d226851",
            "b60f6717-05a7-4f63-9c85-383a4f2b5192"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4087,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "34ae6f07-f5b2-43d2-9567-55e7f9800c61",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/navigation.spec.js",
      "file": "cypress/integration/2-advanced-examples/navigation.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8461b7b5-5671-4253-bc3e-94d7690abd53",
          "title": "Navigation",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.go() - go back or forward in the browser's history",
              "fullTitle": "Navigation cy.go() - go back or forward in the browser's history",
              "timedOut": null,
              "duration": 2760,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/go\ncy.location('pathname').should('include', 'navigation');\ncy.go('back');\ncy.location('pathname').should('not.include', 'navigation');\ncy.go('forward');\ncy.location('pathname').should('include', 'navigation'); // clicking back\ncy.go(-1);\ncy.location('pathname').should('not.include', 'navigation'); // clicking forward\ncy.go(1);\ncy.location('pathname').should('include', 'navigation');",
              "err": {},
              "uuid": "f317d347-272c-4b51-b62d-433bd83c7ee4",
              "parentUUID": "8461b7b5-5671-4253-bc3e-94d7690abd53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.reload() - reload the page",
              "fullTitle": "Navigation cy.reload() - reload the page",
              "timedOut": null,
              "duration": 654,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/reload\ncy.reload(); // reload the page without using the cache\ncy.reload(true);",
              "err": {},
              "uuid": "534bbdf4-2efd-4ef7-82ff-50db24eeaaad",
              "parentUUID": "8461b7b5-5671-4253-bc3e-94d7690abd53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.visit() - visit a remote url",
              "fullTitle": "Navigation cy.visit() - visit a remote url",
              "timedOut": null,
              "duration": 581,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/visit\n// Visit any sub-domain of your current domain\n// Pass options to the visit\ncy.visit('https://example.cypress.io/commands/navigation', {\n  timeout: 50000,\n  // increase total time for the visit to resolve\n  onBeforeLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  },\n  onLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  }\n});",
              "err": {},
              "uuid": "e96c1f4a-f42e-49d7-ba34-a1ea808594c8",
              "parentUUID": "8461b7b5-5671-4253-bc3e-94d7690abd53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f317d347-272c-4b51-b62d-433bd83c7ee4",
            "534bbdf4-2efd-4ef7-82ff-50db24eeaaad",
            "e96c1f4a-f42e-49d7-ba34-a1ea808594c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3995,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "795acf6d-673e-407d-b5ae-0bd3e7f0d9f9",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/network_requests.spec.js",
      "file": "cypress/integration/2-advanced-examples/network_requests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "56ec7acf-7da3-4cd6-b1e7-6c46e804011f",
          "title": "Network Requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.request() - make an XHR request",
              "fullTitle": "Network Requests cy.request() - make an XHR request",
              "timedOut": null,
              "duration": 1960,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/request\ncy.request('https://jsonplaceholder.cypress.io/comments').should(response => {\n  expect(response.status).to.eq(200); // the server sometimes gets an extra comment posted from another machine\n  // which gets returned as 1 extra object\n  expect(response.body).to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.have.property('headers');\n  expect(response).to.have.property('duration');\n});",
              "err": {},
              "uuid": "87fb91f9-5f31-4124-a78a-ed14e2dd4aee",
              "parentUUID": "56ec7acf-7da3-4cd6-b1e7-6c46e804011f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - verify response using BDD syntax",
              "fullTitle": "Network Requests cy.request() - verify response using BDD syntax",
              "timedOut": null,
              "duration": 780,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('https://jsonplaceholder.cypress.io/comments').then(response => {\n  // https://on.cypress.io/assertions\n  expect(response).property('status').to.equal(200);\n  expect(response).property('body').to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.include.keys('headers', 'duration');\n});",
              "err": {},
              "uuid": "7b86ca0c-2919-4049-8c41-7eae61873f65",
              "parentUUID": "56ec7acf-7da3-4cd6-b1e7-6c46e804011f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() with query parameters",
              "fullTitle": "Network Requests cy.request() with query parameters",
              "timedOut": null,
              "duration": 561,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// will execute request\n// https://jsonplaceholder.cypress.io/comments?postId=1&id=3\ncy.request({\n  url: 'https://jsonplaceholder.cypress.io/comments',\n  qs: {\n    postId: 1,\n    id: 3\n  }\n}).its('body').should('be.an', 'array').and('have.length', 1).its('0') // yields first element of the array\n.should('contain', {\n  postId: 1,\n  id: 3\n});",
              "err": {},
              "uuid": "18d9f30f-ae77-4201-863a-b5e5fcdb669b",
              "parentUUID": "56ec7acf-7da3-4cd6-b1e7-6c46e804011f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - pass result to the second request",
              "fullTitle": "Network Requests cy.request() - pass result to the second request",
              "timedOut": null,
              "duration": 888,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// first, let's find out the userId of the first user we have\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body') // yields the response object\n.its('0') // yields the first element of the returned list\n// the above two commands its('body').its('0')\n// can be written as its('body.0')\n// if you do not care about TypeScript checks\n.then(user => {\n  expect(user).property('id').to.be.a('number'); // make a new post on behalf of the user\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  });\n}) // note that the value here is the returned value of the 2nd request\n// which is the new post object\n.then(response => {\n  expect(response).property('status').to.equal(201); // new entity created\n  expect(response).property('body').to.contain({\n    title: 'Cypress Test Runner'\n  }); // we don't know the exact post id - only that it will be > 100\n  // since JSONPlaceholder has built-in 100 posts\n  expect(response.body).property('id').to.be.a('number').and.to.be.gt(100); // we don't know the user id here - since it was in above closure\n  // so in this test just confirm that the property is there\n  expect(response.body).property('userId').to.be.a('number');\n});",
              "err": {},
              "uuid": "d3365669-00ea-4de1-93a3-b4309e0a9e39",
              "parentUUID": "56ec7acf-7da3-4cd6-b1e7-6c46e804011f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - save response in the shared test context",
              "fullTitle": "Network Requests cy.request() - save response in the shared test context",
              "timedOut": null,
              "duration": 877,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/variables-and-aliases\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body').its('0') // yields the first element of the returned list\n.as('user') // saves the object in the test context\n.then(function () {\n  // NOTE 👀\n  //  By the time this callback runs the \"as('user')\" command\n  //  has saved the user object in the test context.\n  //  To access the test context we need to use\n  //  the \"function () { ... }\" callback form,\n  //  otherwise \"this\" points at a wrong or undefined object!\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: this.user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  }).its('body').as('post'); // save the new post from the response\n}).then(function () {\n  // When this callback runs, both \"cy.request\" API commands have finished\n  // and the test context has \"user\" and \"post\" objects set.\n  // Let's verify them.\n  expect(this.post, 'post has the right user id').property('userId').to.equal(this.user.id);\n});",
              "err": {},
              "uuid": "a78151c6-b5f7-43fd-b9f3-52f5feba58c4",
              "parentUUID": "56ec7acf-7da3-4cd6-b1e7-6c46e804011f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.intercept() - route responses to matching requests",
              "fullTitle": "Network Requests cy.intercept() - route responses to matching requests",
              "timedOut": null,
              "duration": 1869,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/intercept\nlet message = 'whoa, this comment does not exist'; // Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment'); // we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click(); // https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]); // Listen to POST to comments\ncy.intercept('POST', '**/comments').as('postComment'); // we have code that posts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-post').click();\ncy.wait('@postComment').should(({\n  request,\n  response\n}) => {\n  expect(request.body).to.include('email');\n  expect(request.headers).to.have.property('content-type');\n  expect(response && response.body).to.have.property('name', 'Using POST in cy.intercept()');\n}); // Stub a response to PUT comments/ ****\ncy.intercept({\n  method: 'PUT',\n  url: '**/comments/*'\n}, {\n  statusCode: 404,\n  body: {\n    error: message\n  },\n  headers: {\n    'access-control-allow-origin': '*'\n  },\n  delayMs: 500\n}).as('putComment'); // we have code that puts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-put').click();\ncy.wait('@putComment'); // our 404 statusCode logic in scripts.js executed\ncy.get('.network-put-comment').should('contain', message);",
              "err": {},
              "uuid": "4862015d-6514-473d-bbfa-0e62b619ff53",
              "parentUUID": "56ec7acf-7da3-4cd6-b1e7-6c46e804011f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87fb91f9-5f31-4124-a78a-ed14e2dd4aee",
            "7b86ca0c-2919-4049-8c41-7eae61873f65",
            "18d9f30f-ae77-4201-863a-b5e5fcdb669b",
            "d3365669-00ea-4de1-93a3-b4309e0a9e39",
            "a78151c6-b5f7-43fd-b9f3-52f5feba58c4",
            "4862015d-6514-473d-bbfa-0e62b619ff53"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6935,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "00a660d8-882d-4f67-9144-14bdde12761a",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/querying.spec.js",
      "file": "cypress/integration/2-advanced-examples/querying.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a97e37ff-75c0-427e-9f4c-6cd00bc5a452",
          "title": "Querying",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.get() - query DOM elements",
              "fullTitle": "Querying cy.get() - query DOM elements",
              "timedOut": null,
              "duration": 1044,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/get\ncy.get('#query-btn').should('contain', 'Button');\ncy.get('.query-btn').should('contain', 'Button');\ncy.get('#querying .well>button:first').should('contain', 'Button'); //              ↲\n// Use CSS selectors just like jQuery\ncy.get('[data-test-id=\"test-example\"]').should('have.class', 'example'); // 'cy.get()' yields jQuery object, you can get its attribute\n// by invoking `.attr()` method\ncy.get('[data-test-id=\"test-example\"]').invoke('attr', 'data-test-id').should('equal', 'test-example'); // or you can get element's CSS property\ncy.get('[data-test-id=\"test-example\"]').invoke('css', 'position').should('equal', 'static'); // or use assertions directly during 'cy.get()'\n// https://on.cypress.io/assertions\ncy.get('[data-test-id=\"test-example\"]').should('have.attr', 'data-test-id', 'test-example').and('have.css', 'position', 'static');",
              "err": {},
              "uuid": "ad4c163d-89ea-419d-b752-39eec8300ee5",
              "parentUUID": "a97e37ff-75c0-427e-9f4c-6cd00bc5a452",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.contains() - query DOM elements with matching content",
              "fullTitle": "Querying cy.contains() - query DOM elements with matching content",
              "timedOut": null,
              "duration": 251,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/contains\ncy.get('.query-list').contains('bananas').should('have.class', 'third'); // we can pass a regexp to `.contains()`\ncy.get('.query-list').contains(/^b\\w+/).should('have.class', 'third');\ncy.get('.query-list').contains('apples').should('have.class', 'first'); // passing a selector to contains will\n// yield the selector containing the text\ncy.get('#querying').contains('ul', 'oranges').should('have.class', 'query-list');\ncy.get('.query-button').contains('Save Form').should('have.class', 'btn');",
              "err": {},
              "uuid": "e28e0406-8f6e-4657-8436-cf33d60c5126",
              "parentUUID": "a97e37ff-75c0-427e-9f4c-6cd00bc5a452",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".within() - query DOM elements within a specific element",
              "fullTitle": "Querying .within() - query DOM elements within a specific element",
              "timedOut": null,
              "duration": 230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/within\ncy.get('.query-form').within(() => {\n  cy.get('input:first').should('have.attr', 'placeholder', 'Email');\n  cy.get('input:last').should('have.attr', 'placeholder', 'Password');\n});",
              "err": {},
              "uuid": "9cced0eb-0965-4efd-a18b-31e79a1994b2",
              "parentUUID": "a97e37ff-75c0-427e-9f4c-6cd00bc5a452",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.root() - query the root DOM element",
              "fullTitle": "Querying cy.root() - query the root DOM element",
              "timedOut": null,
              "duration": 173,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/root\n// By default, root is the document\ncy.root().should('match', 'html');\ncy.get('.query-ul').within(() => {\n  // In this within, the root is now the ul DOM element\n  cy.root().should('have.class', 'query-ul');\n});",
              "err": {},
              "uuid": "24f6cdb5-8e97-4218-90bf-7af27b8794b5",
              "parentUUID": "a97e37ff-75c0-427e-9f4c-6cd00bc5a452",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "best practices - selecting elements",
              "fullTitle": "Querying best practices - selecting elements",
              "timedOut": null,
              "duration": 923,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/best-practices#Selecting-Elements\ncy.get('[data-cy=best-practices-selecting-elements]').within(() => {\n  // Worst - too generic, no context\n  cy.get('button').click(); // Bad. Coupled to styling. Highly subject to change.\n  cy.get('.btn.btn-large').click(); // Average. Coupled to the `name` attribute which has HTML semantics.\n  cy.get('[name=submission]').click(); // Better. But still coupled to styling or JS event listeners.\n  cy.get('#main').click(); // Slightly better. Uses an ID but also ensures the element\n  // has an ARIA role attribute\n  cy.get('#main[role=button]').click(); // Much better. But still coupled to text content that may change.\n  cy.contains('Submit').click(); // Best. Insulated from all changes.\n  cy.get('[data-cy=submit]').click();\n});",
              "err": {},
              "uuid": "50ebfb1e-a34d-43be-80ab-a04012f8b8fd",
              "parentUUID": "a97e37ff-75c0-427e-9f4c-6cd00bc5a452",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ad4c163d-89ea-419d-b752-39eec8300ee5",
            "e28e0406-8f6e-4657-8436-cf33d60c5126",
            "9cced0eb-0965-4efd-a18b-31e79a1994b2",
            "24f6cdb5-8e97-4218-90bf-7af27b8794b5",
            "50ebfb1e-a34d-43be-80ab-a04012f8b8fd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2621,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "c0d89082-cd32-4296-963a-96641b18a1b4",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/spies_stubs_clocks.spec.js",
      "file": "cypress/integration/2-advanced-examples/spies_stubs_clocks.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "672530c5-31d4-440e-b8d0-45f3da18ef71",
          "title": "Spies, Stubs, and Clock",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.spy() - wrap a method in a spy",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() - wrap a method in a spy",
              "timedOut": null,
              "duration": 888,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spy\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  foo() {}\n};\nconst spy = cy.spy(obj, 'foo').as('anyArgs');\nobj.foo();\nexpect(spy).to.be.called;",
              "err": {},
              "uuid": "038b14fe-99dd-4335-83f2-7d7283646cca",
              "parentUUID": "672530c5-31d4-440e-b8d0-45f3da18ef71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.spy() retries until assertions pass",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() retries until assertions pass",
              "timedOut": null,
              "duration": 2521,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * Prints the argument passed\n   * @param x {any}\n  */\n  foo(x) {\n    console.log('obj.foo called with', x);\n  }\n};\ncy.spy(obj, 'foo').as('foo');\nsetTimeout(() => {\n  obj.foo('first');\n}, 500);\nsetTimeout(() => {\n  obj.foo('second');\n}, 2500);\ncy.get('@foo').should('have.been.calledTwice');",
              "err": {},
              "uuid": "7fa266e9-a0a0-469f-bf82-bf5fa5342609",
              "parentUUID": "672530c5-31d4-440e-b8d0-45f3da18ef71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() - create a stub and/or replace a function with stub",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() - create a stub and/or replace a function with stub",
              "timedOut": null,
              "duration": 153,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/stub\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * prints both arguments to the console\n   * @param a {string}\n   * @param b {string}\n  */\n  foo(a, b) {\n    console.log('a', a, 'b', b);\n  }\n};\nconst stub = cy.stub(obj, 'foo').as('foo');\nobj.foo('foo', 'bar');\nexpect(stub).to.be.called;",
              "err": {},
              "uuid": "7b1c4102-050b-465a-8691-03643067392d",
              "parentUUID": "672530c5-31d4-440e-b8d0-45f3da18ef71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clock() - control time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.clock() - control time in the browser",
              "timedOut": null,
              "duration": 271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clock\n// create the date in UTC so its always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#clock-div').click().should('have.text', '1489449600');",
              "err": {},
              "uuid": "7d049e32-db0e-4d97-9ca0-a3f4266e5442",
              "parentUUID": "672530c5-31d4-440e-b8d0-45f3da18ef71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.tick() - move time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.tick() - move time in the browser",
              "timedOut": null,
              "duration": 411,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/tick\n// create the date in UTC so its always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#tick-div').click().should('have.text', '1489449600');\ncy.tick(10000); // 10 seconds passed\ncy.get('#tick-div').click().should('have.text', '1489449610');",
              "err": {},
              "uuid": "41b471fb-65bf-4731-b2f6-0e2ae6d9b891",
              "parentUUID": "672530c5-31d4-440e-b8d0-45f3da18ef71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() matches depending on arguments",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() matches depending on arguments",
              "timedOut": null,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst greeter = {\n  /**\n   * Greets a person\n   * @param {string} name\n  */\n  greet(name) {\n    return `Hello, ${name}!`;\n  }\n};\ncy.stub(greeter, 'greet').callThrough() // if you want non-matched calls to call the real method\n.withArgs(Cypress.sinon.match.string).returns('Hi').withArgs(Cypress.sinon.match.number).throws(new Error('Invalid name'));\nexpect(greeter.greet('World')).to.equal('Hi'); // @ts-ignore\nexpect(() => greeter.greet(42)).to.throw('Invalid name');\nexpect(greeter.greet).to.have.been.calledTwice; // non-matched calls goes the actual method\n// @ts-ignore\nexpect(greeter.greet()).to.equal('Hello, undefined!');",
              "err": {},
              "uuid": "38f107c2-67a8-452c-86dd-4cebb039843a",
              "parentUUID": "672530c5-31d4-440e-b8d0-45f3da18ef71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "matches call arguments using Sinon matchers",
              "fullTitle": "Spies, Stubs, and Clock matches call arguments using Sinon matchers",
              "timedOut": null,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst calculator = {\n  /**\n   * returns the sum of two arguments\n   * @param a {number}\n   * @param b {number}\n  */\n  add(a, b) {\n    return a + b;\n  }\n};\nconst spy = cy.spy(calculator, 'add').as('add');\nexpect(calculator.add(2, 3)).to.equal(5); // if we want to assert the exact values used during the call\nexpect(spy).to.be.calledWith(2, 3); // let's confirm \"add\" method was called with two numbers\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match.number); // alternatively, provide the value to match\nexpect(spy).to.be.calledWith(Cypress.sinon.match(2), Cypress.sinon.match(3)); // match any value\nexpect(spy).to.be.calledWith(Cypress.sinon.match.any, 3); // match any value from a list\nexpect(spy).to.be.calledWith(Cypress.sinon.match.in([1, 2, 3]), 3);\n/**\n * Returns true if the given number is event\n * @param {number} x\n */\nconst isEven = x => x % 2 === 0; // expect the value to pass a custom predicate function\n// the second argument to \"sinon.match(predicate, message)\" is\n// shown if the predicate does not pass and assertion fails\n\nexpect(spy).to.be.calledWith(Cypress.sinon.match(isEven, 'isEven'), 3);\n/**\n * Returns a function that checks if a given number is larger than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\nconst isGreaterThan = limit => x => x > limit;\n/**\n * Returns a function that checks if a given number is less than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\n\nconst isLessThan = limit => x => x < limit; // you can combine several matchers using \"and\", \"or\"\n\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(2), '> 2').and(Cypress.sinon.match(isLessThan(4), '< 4')));\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(200), '> 200').or(Cypress.sinon.match(3))); // matchers can be used from BDD assertions\ncy.get('@add').should('have.been.calledWith', Cypress.sinon.match.number, Cypress.sinon.match(3)); // you can alias matchers for shorter test code\nconst {\n  match: M\n} = Cypress.sinon;\ncy.get('@add').should('have.been.calledWith', M.number, M(3));",
              "err": {},
              "uuid": "316357ed-ac66-4a44-afcc-10ad6eff76fe",
              "parentUUID": "672530c5-31d4-440e-b8d0-45f3da18ef71",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "038b14fe-99dd-4335-83f2-7d7283646cca",
            "7fa266e9-a0a0-469f-bf82-bf5fa5342609",
            "7b1c4102-050b-465a-8691-03643067392d",
            "7d049e32-db0e-4d97-9ca0-a3f4266e5442",
            "41b471fb-65bf-4731-b2f6-0e2ae6d9b891",
            "38f107c2-67a8-452c-86dd-4cebb039843a",
            "316357ed-ac66-4a44-afcc-10ad6eff76fe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4302,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e975424f-79f3-4785-a24f-87a804ddb80d",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/traversal.spec.js",
      "file": "cypress/integration/2-advanced-examples/traversal.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
          "title": "Traversal",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".children() - get child DOM elements",
              "fullTitle": "Traversal .children() - get child DOM elements",
              "timedOut": null,
              "duration": 914,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/children\ncy.get('.traversal-breadcrumb').children('.active').should('contain', 'Data');",
              "err": {},
              "uuid": "ab34b12d-d818-446c-820f-52dde03c8faf",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".closest() - get closest ancestor DOM element",
              "fullTitle": "Traversal .closest() - get closest ancestor DOM element",
              "timedOut": null,
              "duration": 195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/closest\ncy.get('.traversal-badge').closest('ul').should('have.class', 'list-group');",
              "err": {},
              "uuid": "953d4a83-0ae7-4d69-879f-95287717c756",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".eq() - get a DOM element at a specific index",
              "fullTitle": "Traversal .eq() - get a DOM element at a specific index",
              "timedOut": null,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/eq\ncy.get('.traversal-list>li').eq(1).should('contain', 'siamese');",
              "err": {},
              "uuid": "15b0be15-ffa8-4572-9b62-586f49716d57",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".filter() - get DOM elements that match the selector",
              "fullTitle": "Traversal .filter() - get DOM elements that match the selector",
              "timedOut": null,
              "duration": 223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/filter\ncy.get('.traversal-nav>li').filter('.active').should('contain', 'About');",
              "err": {},
              "uuid": "a7eb540e-2bf4-4332-b175-44e8ab40c74d",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".find() - get descendant DOM elements of the selector",
              "fullTitle": "Traversal .find() - get descendant DOM elements of the selector",
              "timedOut": null,
              "duration": 258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/find\ncy.get('.traversal-pagination').find('li').find('a').should('have.length', 7);",
              "err": {},
              "uuid": "ac38d2c6-7c6f-455b-b4a7-b22dc32bc81d",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".first() - get first DOM element",
              "fullTitle": "Traversal .first() - get first DOM element",
              "timedOut": null,
              "duration": 189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/first\ncy.get('.traversal-table td').first().should('contain', '1');",
              "err": {},
              "uuid": "dc10144a-0355-4e4b-92e1-b240576270b8",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".last() - get last DOM element",
              "fullTitle": "Traversal .last() - get last DOM element",
              "timedOut": null,
              "duration": 193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/last\ncy.get('.traversal-buttons .btn').last().should('contain', 'Submit');",
              "err": {},
              "uuid": "3b0008d6-5cb3-4b66-a7f7-2b40849aa009",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".next() - get next sibling DOM element",
              "fullTitle": "Traversal .next() - get next sibling DOM element",
              "timedOut": null,
              "duration": 287,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/next\ncy.get('.traversal-ul').contains('apples').next().should('contain', 'oranges');",
              "err": {},
              "uuid": "83d33014-cbe8-4640-b88c-772dd1c13b7a",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextAll() - get all next sibling DOM elements",
              "fullTitle": "Traversal .nextAll() - get all next sibling DOM elements",
              "timedOut": null,
              "duration": 267,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/nextall\ncy.get('.traversal-next-all').contains('oranges').nextAll().should('have.length', 3);",
              "err": {},
              "uuid": "193b9312-6a85-4ab7-9aa5-946674166aff",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextUntil() - get next sibling DOM elements until next el",
              "fullTitle": "Traversal .nextUntil() - get next sibling DOM elements until next el",
              "timedOut": null,
              "duration": 263,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/nextuntil\ncy.get('#veggies').nextUntil('#nuts').should('have.length', 3);",
              "err": {},
              "uuid": "27b7c35f-eff2-4e30-9ae3-e79bbf2fe395",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".not() - remove DOM elements from set of DOM elements",
              "fullTitle": "Traversal .not() - remove DOM elements from set of DOM elements",
              "timedOut": null,
              "duration": 257,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/not\ncy.get('.traversal-disabled .btn').not('[disabled]').should('not.contain', 'Disabled');",
              "err": {},
              "uuid": "8bf48292-4c7c-42fc-8473-2029d2c5f60e",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parent() - get parent DOM element from DOM elements",
              "fullTitle": "Traversal .parent() - get parent DOM element from DOM elements",
              "timedOut": null,
              "duration": 227,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parent\ncy.get('.traversal-mark').parent().should('contain', 'Morbi leo risus');",
              "err": {},
              "uuid": "bdbe6ba6-6612-4af0-a6a4-c2b29f85dfcf",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parents() - get parent DOM elements from DOM elements",
              "fullTitle": "Traversal .parents() - get parent DOM elements from DOM elements",
              "timedOut": null,
              "duration": 231,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parents\ncy.get('.traversal-cite').parents().should('match', 'blockquote');",
              "err": {},
              "uuid": "7eaaf389-73ad-488d-a36d-985129ccb4d0",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parentsUntil() - get parent DOM elements from DOM elements until el",
              "fullTitle": "Traversal .parentsUntil() - get parent DOM elements from DOM elements until el",
              "timedOut": null,
              "duration": 187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parentsuntil\ncy.get('.clothes-nav').find('.active').parentsUntil('.clothes-nav').should('have.length', 2);",
              "err": {},
              "uuid": "b437e18a-4bc6-4112-b667-b56ae418fc1b",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prev() - get previous sibling DOM element",
              "fullTitle": "Traversal .prev() - get previous sibling DOM element",
              "timedOut": null,
              "duration": 269,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prev\ncy.get('.birds').find('.active').prev().should('contain', 'Lorikeets');",
              "err": {},
              "uuid": "1a7dbc65-883d-4d04-97ae-725318763f6f",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevAll() - get all previous sibling DOM elements",
              "fullTitle": "Traversal .prevAll() - get all previous sibling DOM elements",
              "timedOut": null,
              "duration": 321,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prevall\ncy.get('.fruits-list').find('.third').prevAll().should('have.length', 2);",
              "err": {},
              "uuid": "99a5d8df-b96b-4f36-b25c-87b7939058fa",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevUntil() - get all previous sibling DOM elements until el",
              "fullTitle": "Traversal .prevUntil() - get all previous sibling DOM elements until el",
              "timedOut": null,
              "duration": 225,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prevuntil\ncy.get('.foods-list').find('#nuts').prevUntil('#veggies').should('have.length', 3);",
              "err": {},
              "uuid": "788a146a-6317-4628-a12d-8d41c5086b21",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".siblings() - get all sibling DOM elements",
              "fullTitle": "Traversal .siblings() - get all sibling DOM elements",
              "timedOut": null,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/siblings\ncy.get('.traversal-pills .active').siblings().should('have.length', 2);",
              "err": {},
              "uuid": "60447ed4-fb87-4e23-9e80-82e87236c2aa",
              "parentUUID": "ee17f4c8-9f8b-46bb-8601-da3a8c58f04d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ab34b12d-d818-446c-820f-52dde03c8faf",
            "953d4a83-0ae7-4d69-879f-95287717c756",
            "15b0be15-ffa8-4572-9b62-586f49716d57",
            "a7eb540e-2bf4-4332-b175-44e8ab40c74d",
            "ac38d2c6-7c6f-455b-b4a7-b22dc32bc81d",
            "dc10144a-0355-4e4b-92e1-b240576270b8",
            "3b0008d6-5cb3-4b66-a7f7-2b40849aa009",
            "83d33014-cbe8-4640-b88c-772dd1c13b7a",
            "193b9312-6a85-4ab7-9aa5-946674166aff",
            "27b7c35f-eff2-4e30-9ae3-e79bbf2fe395",
            "8bf48292-4c7c-42fc-8473-2029d2c5f60e",
            "bdbe6ba6-6612-4af0-a6a4-c2b29f85dfcf",
            "7eaaf389-73ad-488d-a36d-985129ccb4d0",
            "b437e18a-4bc6-4112-b667-b56ae418fc1b",
            "1a7dbc65-883d-4d04-97ae-725318763f6f",
            "99a5d8df-b96b-4f36-b25c-87b7939058fa",
            "788a146a-6317-4628-a12d-8d41c5086b21",
            "60447ed4-fb87-4e23-9e80-82e87236c2aa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4947,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b015aa05-a206-4956-89cd-d50688ec2a5e",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/utilities.spec.js",
      "file": "cypress/integration/2-advanced-examples/utilities.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "caff0ab3-0fdd-4759-be29-5ef1c637f6ac",
          "title": "Utilities",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cypress._ - call a lodash method",
              "fullTitle": "Utilities Cypress._ - call a lodash method",
              "timedOut": null,
              "duration": 1384,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/_\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  let ids = Cypress._.chain(response.body).map('id').take(3).value();\n  expect(ids).to.deep.eq([1, 2, 3]);\n});",
              "err": {},
              "uuid": "b5e2138c-ca38-4cf4-8505-b7ea07f9eaca",
              "parentUUID": "caff0ab3-0fdd-4759-be29-5ef1c637f6ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.$ - call a jQuery method",
              "fullTitle": "Utilities Cypress.$ - call a jQuery method",
              "timedOut": null,
              "duration": 268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/$\nlet $li = Cypress.$('.utility-jquery li:first');\ncy.wrap($li).should('not.have.class', 'active').click().should('have.class', 'active');",
              "err": {},
              "uuid": "8cf55e20-5447-483c-80a2-7863e3164212",
              "parentUUID": "caff0ab3-0fdd-4759-be29-5ef1c637f6ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Blob - blob utilities and base64 string conversion",
              "fullTitle": "Utilities Cypress.Blob - blob utilities and base64 string conversion",
              "timedOut": null,
              "duration": 428,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blob\ncy.get('.utility-blob').then($div => {\n  // https://github.com/nolanlawson/blob-util#imgSrcToDataURL\n  // get the dataUrl string for the javascript-logo\n  return Cypress.Blob.imgSrcToDataURL('https://example.cypress.io/assets/img/javascript-logo.png', undefined, 'anonymous').then(dataUrl => {\n    // create an <img> element and set its src to the dataUrl\n    let img = Cypress.$('<img />', {\n      src: dataUrl\n    }); // need to explicitly return cy here since we are initially returning\n    // the Cypress.Blob.imgSrcToDataURL promise to our test\n    // append the image\n    $div.append(img);\n    cy.get('.utility-blob img').click().should('have.attr', 'src', dataUrl);\n  });\n});",
              "err": {},
              "uuid": "4d39a0f2-df25-4bd4-af16-651cedf0ec18",
              "parentUUID": "caff0ab3-0fdd-4759-be29-5ef1c637f6ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.minimatch - test out glob patterns against strings",
              "fullTitle": "Utilities Cypress.minimatch - test out glob patterns against strings",
              "timedOut": null,
              "duration": 154,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/minimatch\nlet matching = Cypress.minimatch('/users/1/comments', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'matching wildcard').to.be.true;\nmatching = Cypress.minimatch('/users/1/comments/2', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.false; // ** matches against all downstream path segments\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/**', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.true; // whereas * matches only the next path segment\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/*', {\n  matchBase: false\n});\nexpect(matching, 'comments').to.be.false;",
              "err": {},
              "uuid": "1341a1cd-715a-461b-a94a-795143468b00",
              "parentUUID": "caff0ab3-0fdd-4759-be29-5ef1c637f6ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Promise - instantiate a bluebird promise",
              "fullTitle": "Utilities Cypress.Promise - instantiate a bluebird promise",
              "timedOut": null,
              "duration": 1166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/promise\nlet waited = false;\n/**\n * @return Bluebird<string>\n */\nfunction waitOneSecond() {\n  // return a promise that resolves after 1 second\n  // @ts-ignore TS2351 (new Cypress.Promise)\n  return new Cypress.Promise((resolve, reject) => {\n    setTimeout(() => {\n      // set waited to true\n      waited = true; // resolve with 'foo' string\n      resolve('foo');\n    }, 1000);\n  });\n}\ncy.then(() => {\n  // return a promise to cy.then() that\n  // is awaited until it resolves\n  // @ts-ignore TS7006\n  return waitOneSecond().then(str => {\n    expect(str).to.eq('foo');\n    expect(waited).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "b83625ef-8038-4d06-8737-2077c4c0c5c1",
              "parentUUID": "caff0ab3-0fdd-4759-be29-5ef1c637f6ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b5e2138c-ca38-4cf4-8505-b7ea07f9eaca",
            "8cf55e20-5447-483c-80a2-7863e3164212",
            "4d39a0f2-df25-4bd4-af16-651cedf0ec18",
            "1341a1cd-715a-461b-a94a-795143468b00",
            "b83625ef-8038-4d06-8737-2077c4c0c5c1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3400,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "76b1c474-4c35-46e2-9839-92847736d687",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/viewport.spec.js",
      "file": "cypress/integration/2-advanced-examples/viewport.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "96a073a7-d344-49f1-a772-6873e7e40470",
          "title": "Viewport",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.viewport() - set the viewport size and dimension",
              "fullTitle": "Viewport cy.viewport() - set the viewport size and dimension",
              "timedOut": null,
              "duration": 3594,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/viewport\ncy.get('#navbar').should('be.visible');\ncy.viewport(320, 480); // the navbar should have collapse since our screen is smaller\ncy.get('#navbar').should('not.be.visible');\ncy.get('.navbar-toggle').should('be.visible').click();\ncy.get('.nav').find('a').should('be.visible'); // lets see what our app looks like on a super large screen\ncy.viewport(2999, 2999); // cy.viewport() accepts a set of preset sizes\n// to easily set the screen to a device's width and height\n// We added a cy.wait() between each viewport change so you can see\n// the change otherwise it is a little too fast to see :)\ncy.viewport('macbook-15');\ncy.wait(200);\ncy.viewport('macbook-13');\ncy.wait(200);\ncy.viewport('macbook-11');\ncy.wait(200);\ncy.viewport('ipad-2');\ncy.wait(200);\ncy.viewport('ipad-mini');\ncy.wait(200);\ncy.viewport('iphone-6+');\ncy.wait(200);\ncy.viewport('iphone-6');\ncy.wait(200);\ncy.viewport('iphone-5');\ncy.wait(200);\ncy.viewport('iphone-4');\ncy.wait(200);\ncy.viewport('iphone-3');\ncy.wait(200); // cy.viewport() accepts an orientation for all presets\n// the default orientation is 'portrait'\ncy.viewport('ipad-2', 'portrait');\ncy.wait(200);\ncy.viewport('iphone-4', 'landscape');\ncy.wait(200); // The viewport will be reset back to the default dimensions\n// in between tests (the  default can be set in cypress.json)",
              "err": {},
              "uuid": "3030eea9-fe8a-475f-b580-ee1ab70cfffd",
              "parentUUID": "96a073a7-d344-49f1-a772-6873e7e40470",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3030eea9-fe8a-475f-b580-ee1ab70cfffd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3594,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "925a7dab-2379-4f34-ad68-5b9bd2d107c9",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/waiting.spec.js",
      "file": "cypress/integration/2-advanced-examples/waiting.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "03e1ecf0-d132-4d36-8397-1e6f699e0e79",
          "title": "Waiting",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.wait() - wait for a specific amount of time",
              "fullTitle": "Waiting cy.wait() - wait for a specific amount of time",
              "timedOut": null,
              "duration": 5093,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.wait-input1').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input2').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input3').type('Wait 1000ms after typing');\ncy.wait(1000);",
              "err": {},
              "uuid": "67977e71-a987-4cc4-954d-9c737e44c701",
              "parentUUID": "03e1ecf0-d132-4d36-8397-1e6f699e0e79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wait() - wait for a specific route",
              "fullTitle": "Waiting cy.wait() - wait for a specific route",
              "timedOut": null,
              "duration": 677,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment'); // we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click(); // wait for GET comments/1\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);",
              "err": {},
              "uuid": "b2e30b82-0a17-42ca-90b4-876f21b74558",
              "parentUUID": "03e1ecf0-d132-4d36-8397-1e6f699e0e79",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "67977e71-a987-4cc4-954d-9c737e44c701",
            "b2e30b82-0a17-42ca-90b4-876f21b74558"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5770,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1be9b4bc-7784-4090-9f32-4c79579390ff",
      "title": "",
      "fullFile": "cypress/integration/2-advanced-examples/window.spec.js",
      "file": "cypress/integration/2-advanced-examples/window.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "27e7dbf9-259b-4aa6-b98b-cdefcb2cd40b",
          "title": "Window",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.window() - get the global window object",
              "fullTitle": "Window cy.window() - get the global window object",
              "timedOut": null,
              "duration": 644,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/window\ncy.window().should('have.property', 'top');",
              "err": {},
              "uuid": "de05bb1a-bcb9-46e2-9ced-d3a242294fcf",
              "parentUUID": "27e7dbf9-259b-4aa6-b98b-cdefcb2cd40b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.document() - get the document object",
              "fullTitle": "Window cy.document() - get the document object",
              "timedOut": null,
              "duration": 166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/document\ncy.document().should('have.property', 'charset').and('eq', 'UTF-8');",
              "err": {},
              "uuid": "a6664118-7a01-470f-b3eb-407d6b2ba12d",
              "parentUUID": "27e7dbf9-259b-4aa6-b98b-cdefcb2cd40b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.title() - get the title",
              "fullTitle": "Window cy.title() - get the title",
              "timedOut": null,
              "duration": 131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/title\ncy.title().should('include', 'Kitchen Sink');",
              "err": {},
              "uuid": "63d650ff-f925-4b4d-beb1-e1abaa10ba82",
              "parentUUID": "27e7dbf9-259b-4aa6-b98b-cdefcb2cd40b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "de05bb1a-bcb9-46e2-9ced-d3a242294fcf",
            "a6664118-7a01-470f-b3eb-407d6b2ba12d",
            "63d650ff-f925-4b4d-beb1-e1abaa10ba82"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 941,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d2f1e91e-a480-4713-85e2-2feabd42132e",
      "title": "",
      "fullFile": "cypress/integration/day1.js",
      "file": "cypress/integration/day1.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "159ed9ce-4e04-43c1-aa97-9518038bfd04",
          "title": "Fizz buzz test cases",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns fizz if the number is a multiple of 3",
              "fullTitle": "Fizz buzz test cases Returns fizz if the number is a multiple of 3",
              "timedOut": null,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fizzMessageExpected([3, 6, 9, 12], \"fizz\");",
              "err": {},
              "uuid": "fa3e1280-e58c-4277-a93f-944562efbdfb",
              "parentUUID": "159ed9ce-4e04-43c1-aa97-9518038bfd04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns buzz if the number is a multiple of 5",
              "fullTitle": "Fizz buzz test cases Returns buzz if the number is a multiple of 5",
              "timedOut": null,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fizzMessageExpected([10, 20, 25], \"buzz\");",
              "err": {},
              "uuid": "514853cf-130a-476c-8ad3-b5f9b55d1d3e",
              "parentUUID": "159ed9ce-4e04-43c1-aa97-9518038bfd04",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns fizzbuzz if the number is a multiple of 5 and 3",
              "fullTitle": "Fizz buzz test cases Returns fizzbuzz if the number is a multiple of 5 and 3",
              "timedOut": null,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fizzMessageExpected([15, 30, 45], \"fizzbuzz\");",
              "err": {},
              "uuid": "80da02de-035b-46a7-9b0e-d07988b4e97b",
              "parentUUID": "159ed9ce-4e04-43c1-aa97-9518038bfd04",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa3e1280-e58c-4277-a93f-944562efbdfb",
            "514853cf-130a-476c-8ad3-b5f9b55d1d3e",
            "80da02de-035b-46a7-9b0e-d07988b4e97b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 64,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c020f0dc-75b8-4417-a01a-ed68b1d225dc",
          "title": "Saucelabs demo page",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Logging in with a standart user",
              "fullTitle": "Saucelabs demo page Logging in with a standart user",
              "timedOut": null,
              "duration": 162,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.login(\"standard_user\", \"secret_sauce\"); //NEVER DO THIS -->\n//cy.get(\":nth-child(1) > .inventory_item_description > .inventory_item_label > .inventory_item_desc\")\ncy.url(\"https://www.saucedemo.com/inventory.html\");\ncy.get(\".shopping_cart_link\").should(\"be.visible\");",
              "err": {
                "message": "TypeError: Cannot read property 'login' of undefined",
                "estack": "TypeError: Cannot read property 'login' of undefined\n    at Context.eval (https://www.saucedemo.com/__cypress/tests?p=cypress/support/index.js:123:55)",
                "diff": null
              },
              "uuid": "aca8c69b-d3a8-49c7-8bf8-385445c11754",
              "parentUUID": "c020f0dc-75b8-4417-a01a-ed68b1d225dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Logging in with a locked out user",
              "fullTitle": "Saucelabs demo page Logging in with a locked out user",
              "timedOut": null,
              "duration": 196,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.login(\"locked_out_user\", \"secret_sauce\");\ncy.get(\"[data-test=error]\").should(\"be.visible\").and(\"have.text\", \"Epic sadface: Sorry, this user has been locked out.\");",
              "err": {
                "message": "TypeError: Cannot read property 'login' of undefined",
                "estack": "TypeError: Cannot read property 'login' of undefined\n    at Context.eval (https://www.saucedemo.com/__cypress/tests?p=cypress/support/index.js:123:55)",
                "diff": null
              },
              "uuid": "03c23015-80df-4717-8393-8b020608af9f",
              "parentUUID": "c020f0dc-75b8-4417-a01a-ed68b1d225dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Logging in with an invalid user",
              "fullTitle": "Saucelabs demo page Logging in with an invalid user",
              "timedOut": null,
              "duration": 179,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.login(\"asdfasdfasdf\", \"sadffasdfasdf\");\ncy.get(\"[data-test=error]\").should(\"be.visible\").and(\"have.text\", \"Epic sadface: Username and password do not match any user in this service\");",
              "err": {
                "message": "TypeError: Cannot read property 'login' of undefined",
                "estack": "TypeError: Cannot read property 'login' of undefined\n    at Context.eval (https://www.saucedemo.com/__cypress/tests?p=cypress/support/index.js:123:55)",
                "diff": null
              },
              "uuid": "4de91435-573a-42ca-8cc5-6dbf9c5d5ce7",
              "parentUUID": "c020f0dc-75b8-4417-a01a-ed68b1d225dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Closing the error message",
              "fullTitle": "Saucelabs demo page Closing the error message",
              "timedOut": null,
              "duration": 196,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Before Cypress command:\n// cy.visit(\"/\");\n// cy.get(\"[data-test=username]\").type(\"asdfasdfasdf\");\n// cy.get(\"[data-test=password]\").type(\"seasdfasdfuce\");\n// cy.get(\"[data-test=login-button]\").click();\n// After Cypress command:\ncy.login(\"asdfasdfasdf\", \"sadffasdfasdf\");\ncy.get(\"[data-test=error]\").should(\"be.visible\");\ncy.get(\".error-button\").click();\ncy.get(\"[data-test=error]\").should(\"not.exist\");",
              "err": {
                "message": "TypeError: Cannot read property 'login' of undefined",
                "estack": "TypeError: Cannot read property 'login' of undefined\n    at Context.eval (https://www.saucedemo.com/__cypress/tests?p=cypress/support/index.js:123:55)",
                "diff": null
              },
              "uuid": "982124e2-eda9-4d3a-8673-d4e8d1dfacc1",
              "parentUUID": "c020f0dc-75b8-4417-a01a-ed68b1d225dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "aca8c69b-d3a8-49c7-8bf8-385445c11754",
            "03c23015-80df-4717-8393-8b020608af9f",
            "4de91435-573a-42ca-8cc5-6dbf9c5d5ce7",
            "982124e2-eda9-4d3a-8673-d4e8d1dfacc1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 733,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2d15a356-0b75-49ea-af7a-e38b4a6df6c1",
      "title": "",
      "fullFile": "cypress/integration/day2.js",
      "file": "cypress/integration/day2.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Reading login data fixtures",
          "fullTitle": "Reading login data fixtures",
          "timedOut": null,
          "duration": 1716,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.login(\"standart\");",
          "err": {},
          "uuid": "0871415d-797a-436c-9cca-573be265ac1b",
          "parentUUID": "2d15a356-0b75-49ea-af7a-e38b4a6df6c1",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Checkout with data from fixtures",
          "fullTitle": "Checkout with data from fixtures",
          "timedOut": null,
          "duration": 2211,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.login(\"standart\");\ncy.get(\"[data-test*=add-to-cart]\").first().click();\ncy.get(\"[data-test*=remove]\").first().should(\"have.text\", \"Remove\");\ncy.get(\".shopping_cart_badge\").should(\"have.text\", \"1\");\ncy.get(\".shopping_cart_link\").click();\ncy.get(\"[data-test=checkout]\").click();\ncy.fixture(\"cypressUsers.json\").then(fixture => {\n  cy.get(\"[data-test=firstName]\").type(fixture[\"standart\"].firstName);\n  cy.get(\"[data-test=lastName]\").type(fixture[\"standart\"].lastName);\n  cy.get(\"[data-test=postalCode]\").type(fixture[\"standart\"].zipCode);\n});\ncy.get(\"[data-test=continue]\").click();\ncy.get(\"[data-test=finish]\").click();\ncy.get(\".complete-header\").should(\"have.text\", \"THANK YOU FOR YOUR ORDER\");",
          "err": {},
          "uuid": "6443db12-60d2-4a11-8b1d-62f54ccfb31a",
          "parentUUID": "2d15a356-0b75-49ea-af7a-e38b4a6df6c1",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Mocking requests to produce error state of the application",
          "fullTitle": "Mocking requests to produce error state of the application",
          "timedOut": null,
          "duration": 20875,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.visit(\"https://app.superfluid.finance/streams/goerli/0x04c054715203c4c74d0a222c647106728971bbc357de456305fb4ee60a60c72d/26\");\ncy.intercept(\"POST\", \"superfluid-goerli\", {\n  statusCode: 400,\n  body: {\n    message: \"Error loading the stream details\"\n  }\n});\ncy.contains(\"We are unable to fetch the stream details right now.\").should(\"be.visible\");",
          "err": {},
          "uuid": "9551cbef-01f3-401c-ae48-5233b1466442",
          "parentUUID": "2d15a356-0b75-49ea-af7a-e38b4a6df6c1",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Dynamicly mocking Coingecko responses in Superfluid",
          "fullTitle": "Dynamicly mocking Coingecko responses in Superfluid",
          "timedOut": null,
          "duration": 9278,
          "state": "passed",
          "speed": "slow",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.fixture(\"currencies\").then(fixture => {\n  cy.intercept(\"GET\", \"**markets**\", request => {\n    request.continue(response => {\n      response.body[0][\"current_price\"] = fixture.tokenValues[request.query[\"ids\"]] * fixture.fiatValues[request.query[\"vs_currency\"]].multiplier;\n    });\n  }).as(\"coingeckoRequest\");\n  cy.visit(\"https://app.superfluid.finance/streams/goerli/0x04c054715203c4c74d0a222c647106728971bbc357de456305fb4ee60a60c72d/26\");\n  let currencies = [\"USD\", \"GBP\", \"EUR\", \"CNY\"];\n  currencies.forEach(currency => {\n    cy.get(\"[data-cy=fiat_currency]\").click();\n    cy.get(\"[data-cy=item-\" + currency + \"-multi\").filter(\":visible\").click();\n    cy.wait(\"@coingeckoRequest\");\n    let flowRate = 9645061728395;\n    let secondsPerMonth = 2592000;\n    let result = (flowRate * secondsPerMonth / 1e18 * fixture.fiatValues[currency].multiplier).toFixed(2);\n    cy.get(\"[data-cy=per_month]\", {\n      timeout: 5000\n    }).should(\"have.text\", result + \" \" + currency);\n  });\n});",
          "err": {},
          "uuid": "016594cb-10b3-4e2f-9c89-0e7c6870c8aa",
          "parentUUID": "2d15a356-0b75-49ea-af7a-e38b4a6df6c1",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "0cb338f5-3416-459a-859b-23d25771b34f",
          "title": "Cypress test cases for day 2",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding items to cart",
              "fullTitle": "Cypress test cases for day 2 Adding items to cart",
              "timedOut": null,
              "duration": 1780,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login(\"standart\");\ncy.get(\"[data-test*=add-to-cart]\").first().click();\ncy.get(\"[data-test*=remove]\").first().should(\"have.text\", \"Remove\");\ncy.get(\".shopping_cart_badge\").should(\"have.text\", \"1\");\ncy.get(\".inventory_item_name\").first().invoke(\"text\").then(text => {\n  cy.get(\".shopping_cart_link\").click();\n  cy.get(\".inventory_item_name\").should(\"have.text\", text);\n});\ncy.get(\"[data-test=continue-shopping]\").click();\ncy.get(\"[data-test*=remove]\").first().click();\ncy.get(\".shopping_cart_badge\").should(\"not.exist\");",
              "err": {},
              "uuid": "fc31427d-cd54-4e37-b799-1329a8da99f6",
              "parentUUID": "0cb338f5-3416-459a-859b-23d25771b34f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking cookies added after login and removed after logout",
              "fullTitle": "Cypress test cases for day 2 Checking cookies added after login and removed after logout",
              "timedOut": null,
              "duration": 1537,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login(\"standart\");\ncy.getCookie(\"session-username\").then(cookie => {\n  expect(cookie.value).to.be.eq(\"standard_user\");\n});\ncy.get(\".bm-burger-button\").click();\ncy.get(\"#logout_sidebar_link\").click();\ncy.getCookie(\"session-username\").should(\"not.exist\");",
              "err": {},
              "uuid": "2402f331-45e5-443e-8f4b-354fb639c380",
              "parentUUID": "0cb338f5-3416-459a-859b-23d25771b34f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checking if user is logged out if cookies expire",
              "fullTitle": "Cypress test cases for day 2 Checking if user is logged out if cookies expire",
              "timedOut": null,
              "duration": 1327,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login(\"standart\");\ncy.getCookie(\"session-username\").then(cookie => {\n  expect(cookie.value).to.be.eq(\"standard_user\");\n});\ncy.clearCookies();\ncy.reload();\ncy.get(\"[data-test=error]\").should(\"have.text\", \"Epic sadface: You can only access '/inventory.html' when you are logged in.\");",
              "err": {},
              "uuid": "ef73486d-6075-4453-b930-bc164040db02",
              "parentUUID": "0cb338f5-3416-459a-859b-23d25771b34f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fc31427d-cd54-4e37-b799-1329a8da99f6",
            "2402f331-45e5-443e-8f4b-354fb639c380",
            "ef73486d-6075-4453-b930-bc164040db02"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4644,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [
        "0871415d-797a-436c-9cca-573be265ac1b",
        "6443db12-60d2-4a11-8b1d-62f54ccfb31a",
        "9551cbef-01f3-401c-ae48-5233b1466442",
        "016594cb-10b3-4e2f-9c89-0e7c6870c8aa"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 34080,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.0"
    },
    "marge": {
      "options": {
        "html": false,
        "json": true,
        "overwrite": true,
        "timestamp": "mmddyyyy_HHMMss"
      },
      "version": "5.2.0"
    }
  }
}